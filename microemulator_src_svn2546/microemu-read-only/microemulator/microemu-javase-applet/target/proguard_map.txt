nanoxml.XMLElement -> me2.b:
    java.util.Hashtable attributes -> a
    java.util.Vector children -> a
    java.lang.String name -> a
    java.lang.String contents -> b
    java.util.Hashtable entities -> b
    boolean ignoreCase -> a
    boolean ignoreWhitespace -> b
    char charReadTooMuch -> a
    java.io.Reader reader -> a
    int parserLineNr -> a
    void addChild(nanoxml.XMLElement) -> a
    void setAttribute(java.lang.String,java.lang.Object) -> a
    nanoxml.XMLElement getChild(java.lang.String) -> a
    int getChildCount(java.lang.String) -> a
    nanoxml.XMLElement getChild(java.lang.String,java.lang.String) -> a
    nanoxml.XMLElement getChild(java.lang.String,java.util.Map) -> a
    java.lang.Object getAttribute(java.lang.String,java.lang.Object) -> a
    java.util.Map getStringAttributes(java.lang.String[]) -> a
    java.lang.String getStringAttribute(java.lang.String,java.lang.String) -> a
    int getIntAttribute(java.lang.String,int) -> a
    boolean getBooleanAttribute(java.lang.String,boolean) -> a
    void parseFromReader(java.io.Reader,int) -> a
    java.lang.String toString() -> toString
    void writeTabs(java.io.Writer,int) -> a
    void writeIdented(java.io.Writer,int) -> b
    void writeEncoded(java.io.Writer,java.lang.String) -> a
    void scanIdentifier(java.lang.StringBuffer) -> a
    char scanWhitespace() -> a
    char scanWhitespace(java.lang.StringBuffer) -> a
    void scanString(java.lang.StringBuffer) -> b
    void scanPCData(java.lang.StringBuffer) -> c
    boolean checkCDATA(java.lang.StringBuffer) -> a
    void skipComment() -> a
    void skipSpecialTag(int) -> a
    boolean checkLiteral(java.lang.String) -> a
    char readChar() -> b
    void scanElement(nanoxml.XMLElement) -> b
    void resolveEntity(java.lang.StringBuffer) -> d
    nanoxml.XMLParseException invalidValue(java.lang.String,java.lang.String) -> a
    nanoxml.XMLParseException expectedInput(java.lang.String) -> a
    nanoxml.XMLParseException unknownEntity(java.lang.String) -> b
nanoxml.XMLParseException -> me2.s:
org.microemu.Injected -> org.microemu.Injected:
    long serialVersionUID -> serialVersionUID
    java.io.PrintStream out -> out
    java.io.PrintStream err -> err
    java.io.PrintStream outPrintStream() -> outPrintStream
    java.io.PrintStream errPrintStream() -> errPrintStream
    void printStackTrace(java.lang.Throwable) -> printStackTrace
    java.lang.String getProperty(java.lang.String) -> getProperty
    java.io.InputStream getResourceAsStream(java.lang.Class,java.lang.String) -> getResourceAsStream
    java.lang.Throwable handleCatchThrowable(java.lang.Throwable) -> handleCatchThrowable
org.microemu.app.ui.swing.SwingDeviceComponent -> me2.a:
    org.microemu.app.ui.swing.SwingDisplayComponent dc -> a
    org.microemu.device.j2se.J2SEButton prevOverButton -> a
    org.microemu.device.j2se.J2SEButton overButton -> b
    org.microemu.device.j2se.J2SEButton pressedButton -> c
    boolean mouseButtonDown -> a
    java.awt.Image offi -> a
    java.awt.Graphics offg -> a
    boolean showMouseCoordinates -> b
    int pressedX -> a
    int pressedY -> b
    java.awt.event.MouseAdapter mouseListener -> a
    java.awt.event.MouseMotionListener mouseMotionListener -> a
    java.text.AttributedCharacterIterator EMPTY_TEXT -> a
    org.microemu.DisplayComponent getDisplayComponent() -> a
    void init() -> a
    void repaint(org.microemu.device.impl.Rectangle) -> a
    void caretPositionChanged(java.awt.event.InputMethodEvent) -> caretPositionChanged
    void inputMethodTextChanged(java.awt.event.InputMethodEvent) -> inputMethodTextChanged
    java.awt.im.InputMethodRequests getInputMethodRequests() -> getInputMethodRequests
    int getCommittedTextLength() -> getCommittedTextLength
    int getInsertPositionOffset() -> getInsertPositionOffset
    java.text.AttributedCharacterIterator getCommittedText(int,int,java.text.AttributedCharacterIterator$Attribute[]) -> getCommittedText
    java.awt.Rectangle getTextLocation(java.awt.font.TextHitInfo) -> getTextLocation
    java.awt.font.TextHitInfo getLocationOffset(int,int) -> getLocationOffset
    java.text.AttributedCharacterIterator getSelectedText(java.text.AttributedCharacterIterator$Attribute[]) -> getSelectedText
    java.text.AttributedCharacterIterator cancelLatestCommittedText(java.text.AttributedCharacterIterator$Attribute[]) -> cancelLatestCommittedText
    void keyTyped(java.awt.event.KeyEvent) -> keyTyped
    void keyPressed(java.awt.event.KeyEvent) -> keyPressed
    void keyReleased(java.awt.event.KeyEvent) -> keyReleased
    void paintComponent(java.awt.Graphics) -> paintComponent
    void drawImageInShape(java.awt.Graphics,java.awt.Image,org.microemu.device.impl.Shape) -> a
    java.awt.Dimension getPreferredSize() -> getPreferredSize
    boolean access$002(org.microemu.app.ui.swing.SwingDeviceComponent,boolean) -> a
    int access$102(org.microemu.app.ui.swing.SwingDeviceComponent,int) -> a
    int access$202(org.microemu.app.ui.swing.SwingDeviceComponent,int) -> b
    void access$300(org.microemu.app.ui.swing.SwingDeviceComponent,org.microemu.device.impl.Rectangle) -> a
    boolean access$400(org.microemu.app.ui.swing.SwingDeviceComponent) -> a
    boolean access$000(org.microemu.app.ui.swing.SwingDeviceComponent) -> b
    int access$100(org.microemu.app.ui.swing.SwingDeviceComponent) -> a
    int access$200(org.microemu.app.ui.swing.SwingDeviceComponent) -> b
org.microemu.app.ui.swing.SwingDeviceComponent$1 -> me2.w:
    org.microemu.app.ui.swing.SwingDeviceComponent this$0 -> a
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
    void mouseReleased(java.awt.event.MouseEvent) -> mouseReleased
org.microemu.app.ui.swing.SwingDeviceComponent$2 -> me2.y:
    org.microemu.app.ui.swing.SwingDeviceComponent this$0 -> a
    void mouseDragged(java.awt.event.MouseEvent) -> mouseDragged
    void mouseMoved(java.awt.event.MouseEvent) -> mouseMoved
org.microemu.app.ui.swing.SwingDeviceComponent$MouseRepeatedTimerTask -> me2.ar:
    java.util.Timer timer -> a
    org.microemu.device.j2se.J2SEButton button -> a
    org.microemu.device.j2se.J2SEInputMethod inputMethod -> a
    org.microemu.app.ui.swing.SwingDeviceComponent$MouseRepeatedTimerTask task -> a
    void stop() -> a
    void mouseReleased() -> b
    void run() -> run
org.microemu.app.ui.swing.SwingDisplayComponent -> me2.m:
    org.microemu.app.ui.swing.SwingDeviceComponent deviceComponent -> a
    org.microemu.device.j2se.J2SEGraphicsSurface graphicsSurface -> a
    org.microemu.device.impl.SoftButton initialPressedSoftButton -> a
    boolean showMouseCoordinates -> a
    java.awt.Point pressedPoint -> a
    java.awt.event.MouseAdapter mouseListener -> a
    java.awt.event.MouseMotionListener mouseMotionListener -> a
    java.awt.event.MouseWheelListener mouseWheelListener -> a
    java.awt.Dimension getPreferredSize() -> getPreferredSize
    void paintComponent(java.awt.Graphics) -> paintComponent
    void repaintRequest(int,int,int,int) -> repaintRequest
    void fireDisplayRepaint(org.microemu.device.j2se.J2SEGraphicsSurface,int,int,int,int) -> a
    java.awt.Point deviceCoordinate(org.microemu.device.DeviceDisplay,java.awt.Point) -> a
    org.microemu.device.j2se.J2SEButton access$300(org.microemu.app.ui.swing.SwingDisplayComponent,org.microemu.device.impl.ButtonName) -> a
org.microemu.app.ui.swing.SwingDisplayComponent$1 -> me2.al:
    org.microemu.app.ui.swing.SwingDisplayComponent this$0 -> a
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
    void mouseReleased(java.awt.event.MouseEvent) -> mouseReleased
org.microemu.app.ui.swing.SwingDisplayComponent$2 -> me2.ah:
    org.microemu.app.ui.swing.SwingDisplayComponent this$0 -> a
    void mouseDragged(java.awt.event.MouseEvent) -> mouseDragged
    void mouseMoved(java.awt.event.MouseEvent) -> mouseMoved
org.microemu.app.ui.swing.SwingDisplayComponent$3 -> me2.ag:
    org.microemu.app.ui.swing.SwingDisplayComponent this$0 -> a
    void mouseWheelMoved(java.awt.event.MouseWheelEvent) -> mouseWheelMoved
org.microemu.app.ui.swing.XYConstraints -> me2.x:
    int x -> a
    int y -> b
    int width -> c
    int height -> d
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.Object clone() -> clone
    java.lang.String toString() -> toString
org.microemu.app.ui.swing.XYLayout -> me2.aa:
    java.util.Hashtable info -> a
    org.microemu.app.ui.swing.XYConstraints defaultConstraints -> a
    java.lang.String toString() -> toString
    void addLayoutComponent(java.lang.String,java.awt.Component) -> addLayoutComponent
    void removeLayoutComponent(java.awt.Component) -> removeLayoutComponent
    java.awt.Dimension preferredLayoutSize(java.awt.Container) -> preferredLayoutSize
    java.awt.Dimension minimumLayoutSize(java.awt.Container) -> minimumLayoutSize
    void layoutContainer(java.awt.Container) -> layoutContainer
    void addLayoutComponent(java.awt.Component,java.lang.Object) -> addLayoutComponent
    java.awt.Dimension maximumLayoutSize(java.awt.Container) -> maximumLayoutSize
    float getLayoutAlignmentX(java.awt.Container) -> getLayoutAlignmentX
    float getLayoutAlignmentY(java.awt.Container) -> getLayoutAlignmentY
    void invalidateLayout(java.awt.Container) -> invalidateLayout
    java.awt.Rectangle getComponentBounds(java.awt.Component,boolean) -> a
    java.awt.Dimension getLayoutSize(java.awt.Container,boolean) -> a
org.microemu.app.util.IOUtils -> me2.as:
    void closeQuietly(java.io.InputStream) -> a
org.microemu.app.util.MIDletOutputStreamRedirector -> me2.ak:
    java.io.PrintStream out -> a
    java.io.PrintStream err -> b
    boolean isErrorStream -> a
    void print(boolean) -> print
    void print(char) -> print
    void print(char[]) -> print
    void print(double) -> print
    void print(float) -> print
    void print(int) -> print
    void print(long) -> print
    void print(java.lang.Object) -> print
    void print(java.lang.String) -> print
    void println() -> println
    void println(boolean) -> println
    void println(char) -> println
    void println(char[]) -> println
    void println(double) -> println
    void println(float) -> println
    void println(int) -> println
    void println(long) -> println
    void println(java.lang.Object) -> println
    void println(java.lang.String) -> println
    void write(byte[],int,int) -> write
    void write(int) -> write
org.microemu.app.util.MIDletOutputStreamRedirector$OutputStream2Log -> me2.ab:
    boolean isErrorStream -> a
    java.lang.StringBuffer buffer -> a
    void flush() -> flush
    void write(int) -> write
org.microemu.app.util.MIDletResourceInputStream -> me2.aj:
    java.io.InputStream is -> a
    int available() -> available
    int read() -> read
    int read(byte[]) -> read
org.microemu.app.util.MIDletResourceLoader -> org.microemu.app.util.MIDletResourceLoader:
    boolean traceResourceLoading -> traceResourceLoading
    java.lang.ClassLoader classLoader -> classLoader
    java.lang.String FQCN -> a
    java.io.InputStream getResourceAsStream(java.lang.Class,java.lang.String) -> getResourceAsStream
    java.lang.String resolveName(java.lang.Class,java.lang.String) -> a
org.microemu.app.util.MIDletSystemProperties -> me2.j:
    boolean applyToJavaSystemProperties -> a
    java.util.Map props -> a
    java.util.Map permissions -> b
    boolean wanrOnce -> b
    boolean initialized -> c
    void initOnce() -> a
    java.lang.String getProperty(java.lang.String) -> a
    java.lang.String getSystemProperty(java.lang.String) -> b
    java.lang.String setProperty(java.lang.String,java.lang.String) -> a
org.microemu.app.util.MIDletThread -> org.microemu.app.util.MIDletThread:
    int graceTerminationPeriod -> graceTerminationPeriod
    boolean debug -> a
    boolean terminator -> b
    java.util.Map midlets -> a
    int threadInitNumber -> a
    java.lang.String callLocation -> a
    int nextThreadNum() -> a
    void register(org.microemu.app.util.MIDletThread) -> a
    void run() -> run
    void contextDestroyed(org.microemu.MIDletContext) -> contextDestroyed
    boolean hasRunningThreads(org.microemu.MIDletContext) -> hasRunningThreads
    void access$000(java.util.Map) -> a
org.microemu.app.util.MIDletThread$1 -> me2.z:
    java.util.Map val$threads -> a
    void run() -> run
org.microemu.app.util.MIDletTimer -> org.microemu.app.util.MIDletTimer:
    java.util.Map midlets -> a
    java.lang.String name -> a
    org.microemu.MIDletContext midletContext -> a
    java.util.List tasks -> a
    boolean cancelled -> a
    org.microemu.app.util.MIDletThread thread -> a
    void schedule(java.util.TimerTask,java.util.Date) -> schedule
    void schedule(java.util.TimerTask,java.util.Date,long) -> schedule
    void schedule(java.util.TimerTask,long) -> schedule
    void schedule(java.util.TimerTask,long,long) -> schedule
    void scheduleAtFixedRate(java.util.TimerTask,java.util.Date,long) -> scheduleAtFixedRate
    void scheduleAtFixedRate(java.util.TimerTask,long,long) -> scheduleAtFixedRate
    void cancel() -> cancel
    void run() -> run
    void schedule$212ee18e(java.util.TimerTask,long,long) -> a
    void register(org.microemu.app.util.MIDletTimer) -> a
    void contextDestroyed(org.microemu.MIDletContext) -> contextDestroyed
org.microemu.app.util.MIDletTimerTask -> org.microemu.app.util.MIDletTimerTask:
    org.microemu.app.util.MIDletTimer timer -> a
    long time -> a
    long period -> b
    boolean oneTimeTaskExcecuted -> a
    boolean cancel() -> cancel
    long scheduledExecutionTime() -> scheduledExecutionTime
org.microemu.applet.Main -> org.microemu.applet.Main:
    long serialVersionUID -> serialVersionUID
    javax.microedition.midlet.MIDlet midlet -> midlet
    org.microemu.RecordStoreManager recordStoreManager -> recordStoreManager
    org.microemu.util.JadProperties manifest -> manifest
    org.microemu.app.ui.swing.SwingDeviceComponent devicePanel -> devicePanel
    java.lang.String accessibleHost -> accessibleHost
    org.microemu.device.EmulatorContext emulatorContext -> emulatorContext
    void init() -> init
    void start() -> start
    void stop() -> stop
    void destroy() -> destroy
    org.microemu.RecordStoreManager getRecordStoreManager() -> getRecordStoreManager
    java.lang.String getAppProperty(java.lang.String) -> getAppProperty
    java.lang.String getSuiteName() -> getSuiteName
    java.io.InputStream getResourceAsStream(java.lang.Class,java.lang.String) -> getResourceAsStream
    int checkPermission(java.lang.String) -> checkPermission
    boolean platformRequest(java.lang.String) -> platformRequest
    void notifyDestroyed(org.microemu.MIDletContext) -> notifyDestroyed
    void destroyMIDletContext(org.microemu.MIDletContext) -> destroyMIDletContext
    org.microemu.app.launcher.Launcher getLauncher() -> getLauncher
    java.lang.String getAppletInfo() -> getAppletInfo
    java.lang.String[][] getParameterInfo() -> getParameterInfo
    org.microemu.app.ui.swing.SwingDeviceComponent access$000(org.microemu.applet.Main) -> access$000
    javax.microedition.midlet.MIDlet access$100(org.microemu.applet.Main) -> access$100
org.microemu.applet.Main$1 -> me2.o:
    org.microemu.device.InputMethod inputMethod -> a
    org.microemu.device.DeviceDisplay deviceDisplay -> a
    org.microemu.device.FontManager fontManager -> a
    org.microemu.applet.Main this$0 -> a
    org.microemu.DisplayComponent getDisplayComponent() -> getDisplayComponent
    org.microemu.device.InputMethod getDeviceInputMethod() -> getDeviceInputMethod
    org.microemu.device.DeviceDisplay getDeviceDisplay() -> getDeviceDisplay
    org.microemu.device.FontManager getDeviceFontManager() -> getDeviceFontManager
    java.io.InputStream getResourceAsStream(java.lang.Class,java.lang.String) -> getResourceAsStream
    boolean platformRequest(java.lang.String) -> platformRequest
org.microemu.applet.Main$2 -> me2.n:
    org.microemu.applet.Main this$0 -> a
    void run() -> run
org.microemu.applet.Main$3 -> me2.p:
    org.microemu.applet.Main this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
org.microemu.cldc.CertificateImpl -> me2.af:
    java.security.cert.X509Certificate cert -> a
    java.lang.String getIssuer() -> getIssuer
    long getNotAfter() -> getNotAfter
    long getNotBefore() -> getNotBefore
    java.lang.String getSerialNumber() -> getSerialNumber
    java.lang.String getSigAlgName() -> getSigAlgName
    java.lang.String getSubject() -> getSubject
    java.lang.String getType() -> getType
    java.lang.String getVersion() -> getVersion
org.microemu.cldc.SecurityInfoImpl -> me2.r:
    java.lang.String cipherSuite -> a
    java.lang.String protocolName -> b
    javax.microedition.pki.Certificate certificate -> a
    java.lang.String getCipherSuite() -> getCipherSuite
    java.lang.String getProtocolName() -> getProtocolName
    java.lang.String getProtocolVersion() -> getProtocolVersion
    javax.microedition.pki.Certificate getServerCertificate() -> getServerCertificate
org.microemu.cldc.datagram.Connection -> org.microemu.cldc.datagram.Connection:
    java.lang.String PROTOCOL -> PROTOCOL
    java.net.DatagramSocket socket -> socket
    java.lang.String address -> address
    void close() -> close
    int getMaximumLength() -> getMaximumLength
    int getNominalLength() -> getNominalLength
    void send(javax.microedition.io.Datagram) -> send
    void receive(javax.microedition.io.Datagram) -> receive
    javax.microedition.io.Datagram newDatagram(int) -> newDatagram
    javax.microedition.io.Datagram newDatagram(int,java.lang.String) -> newDatagram
    javax.microedition.io.Datagram newDatagram(byte[],int) -> newDatagram
    javax.microedition.io.Datagram newDatagram(byte[],int,java.lang.String) -> newDatagram
    java.lang.String getLocalAddress() -> getLocalAddress
    int getLocalPort() -> getLocalPort
    javax.microedition.io.Connection openConnection(java.lang.String,int,boolean) -> openConnection
org.microemu.cldc.datagram.DatagramImpl -> me2.f:
    java.net.DatagramPacket packet -> a
    org.microemu.cldc.datagram.DatagramImpl$BufferOutputStream os -> a
    java.io.DataOutputStream dos -> a
    java.io.DataInputStream dis -> a
    void initialiseInOut() -> a
    java.lang.String getAddress() -> getAddress
    byte[] getData() -> getData
    int getLength() -> getLength
    int getOffset() -> getOffset
    void reset() -> reset
    void setAddress(java.lang.String) -> setAddress
    void setAddress(javax.microedition.io.Datagram) -> setAddress
    void setData(byte[],int,int) -> setData
    void setLength(int) -> setLength
    boolean readBoolean() -> readBoolean
    byte readByte() -> readByte
    char readChar() -> readChar
    double readDouble() -> readDouble
    float readFloat() -> readFloat
    void readFully(byte[]) -> readFully
    void readFully(byte[],int,int) -> readFully
    int readInt() -> readInt
    java.lang.String readLine() -> readLine
    long readLong() -> readLong
    short readShort() -> readShort
    java.lang.String readUTF() -> readUTF
    int readUnsignedByte() -> readUnsignedByte
    int readUnsignedShort() -> readUnsignedShort
    int skipBytes(int) -> skipBytes
    void write(int) -> write
    void write(byte[]) -> write
    void write(byte[],int,int) -> write
    void writeBoolean(boolean) -> writeBoolean
    void writeByte(int) -> writeByte
    void writeBytes(java.lang.String) -> writeBytes
    void writeChar(int) -> writeChar
    void writeChars(java.lang.String) -> writeChars
    void writeDouble(double) -> writeDouble
    void writeFloat(float) -> writeFloat
    void writeInt(int) -> writeInt
    void writeLong(long) -> writeLong
    void writeShort(int) -> writeShort
    void writeUTF(java.lang.String) -> writeUTF
org.microemu.cldc.datagram.DatagramImpl$BufferOutputStream -> me2.ap:
    int originalOffset -> a
    int offset -> b
    org.microemu.cldc.datagram.DatagramImpl this$0 -> a
    void write(int) -> write
org.microemu.cldc.http.Connection -> org.microemu.cldc.http.Connection:
    java.net.URLConnection cn -> cn
    boolean connected -> connected
    boolean allowNetworkConnection -> allowNetworkConnection
    javax.microedition.io.Connection openConnection(java.lang.String,int,boolean) -> openConnection
    void close() -> close
    java.lang.String getURL() -> getURL
    java.lang.String getProtocol() -> getProtocol
    java.lang.String getHost() -> getHost
    java.lang.String getFile() -> getFile
    java.lang.String getRef() -> getRef
    java.lang.String getQuery() -> getQuery
    int getPort() -> getPort
    java.lang.String getRequestMethod() -> getRequestMethod
    void setRequestMethod(java.lang.String) -> setRequestMethod
    java.lang.String getRequestProperty(java.lang.String) -> getRequestProperty
    void setRequestProperty(java.lang.String,java.lang.String) -> setRequestProperty
    int getResponseCode() -> getResponseCode
    java.lang.String getResponseMessage() -> getResponseMessage
    long getExpiration() -> getExpiration
    long getDate() -> getDate
    long getLastModified() -> getLastModified
    java.lang.String getHeaderField(java.lang.String) -> getHeaderField
    int getHeaderFieldInt(java.lang.String,int) -> getHeaderFieldInt
    long getHeaderFieldDate(java.lang.String,long) -> getHeaderFieldDate
    java.lang.String getHeaderField(int) -> getHeaderField
    java.lang.String getHeaderFieldKey(int) -> getHeaderFieldKey
    int getImplIndex(int) -> getImplIndex
    java.io.InputStream openInputStream() -> openInputStream
    java.io.DataInputStream openDataInputStream() -> openDataInputStream
    java.io.OutputStream openOutputStream() -> openOutputStream
    java.io.DataOutputStream openDataOutputStream() -> openDataOutputStream
    java.lang.String getType() -> getType
    java.lang.String getEncoding() -> getEncoding
    long getLength() -> getLength
    boolean isAllowNetworkConnection() -> isAllowNetworkConnection
    void setAllowNetworkConnection(boolean) -> setAllowNetworkConnection
org.microemu.cldc.https.Connection -> org.microemu.cldc.https.Connection:
    javax.net.ssl.SSLContext sslContext -> sslContext
    javax.microedition.io.SecurityInfo securityInfo -> securityInfo
    javax.microedition.io.SecurityInfo getSecurityInfo() -> getSecurityInfo
    java.lang.String getProtocol() -> getProtocol
    int getPort() -> getPort
org.microemu.cldc.socket.Connection -> org.microemu.cldc.socket.Connection:
    javax.microedition.io.Connection open(java.lang.String) -> open
    void close() -> close
org.microemu.cldc.socket.ServerSocketConnection -> me2.q:
    java.net.ServerSocket serverSocket -> a
    java.lang.String getLocalAddress() -> getLocalAddress
    int getLocalPort() -> getLocalPort
    javax.microedition.io.StreamConnection acceptAndOpen() -> acceptAndOpen
    void close() -> close
org.microemu.cldc.socket.SocketConnection -> me2.ae:
    java.net.Socket socket -> socket
    java.lang.String getAddress() -> getAddress
    java.lang.String getLocalAddress() -> getLocalAddress
    int getLocalPort() -> getLocalPort
    int getPort() -> getPort
    int getSocketOption(byte) -> getSocketOption
    void setSocketOption(byte,int) -> setSocketOption
    void close() -> close
    java.io.InputStream openInputStream() -> openInputStream
    java.io.DataInputStream openDataInputStream() -> openDataInputStream
    java.io.OutputStream openOutputStream() -> openOutputStream
    java.io.DataOutputStream openDataOutputStream() -> openDataOutputStream
org.microemu.cldc.ssl.Connection -> org.microemu.cldc.ssl.Connection:
    javax.microedition.io.SecurityInfo securityInfo -> securityInfo
    javax.microedition.io.Connection open(java.lang.String) -> open
    void close() -> close
    javax.microedition.io.SecurityInfo getSecurityInfo() -> getSecurityInfo
org.microemu.cldc.ssl.Connection$1 -> me2.ai:
    java.security.cert.X509Certificate[] getAcceptedIssuers() -> getAcceptedIssuers
    void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkClientTrusted
    void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkServerTrusted
org.microemu.device.impl.Button -> org.microemu.device.impl.Button:
    int NAME_RIMARY_SINCE_SKIN_VERSION -> NAME_RIMARY_SINCE_SKIN_VERSION
org.microemu.device.impl.ButtonDetaultDeviceKeyCodes -> org.microemu.device.impl.ButtonDetaultDeviceKeyCodes:
    java.util.Map codes -> a
    java.util.Map gameActions -> b
    int getKeyCode(org.microemu.device.impl.ButtonName) -> getKeyCode
    int getGameAction(org.microemu.device.impl.ButtonName) -> getGameAction
    org.microemu.device.impl.ButtonName getButtonNameByGameAction(int) -> getButtonNameByGameAction
    void code(org.microemu.device.impl.ButtonName,int) -> a
    void code(org.microemu.device.impl.ButtonName,int,int) -> a
org.microemu.device.impl.ButtonName -> org.microemu.device.impl.ButtonName:
    java.util.Map altNames -> a
    org.microemu.device.impl.ButtonName SOFT1 -> SOFT1
    org.microemu.device.impl.ButtonName SOFT2 -> SOFT2
    org.microemu.device.impl.ButtonName SOFT3 -> SOFT3
    org.microemu.device.impl.ButtonName SELECT -> SELECT
    org.microemu.device.impl.ButtonName UP -> UP
    org.microemu.device.impl.ButtonName DOWN -> DOWN
    org.microemu.device.impl.ButtonName LEFT -> LEFT
    org.microemu.device.impl.ButtonName RIGHT -> RIGHT
    org.microemu.device.impl.ButtonName BACK_SPACE -> BACK_SPACE
    org.microemu.device.impl.ButtonName DELETE -> DELETE
    org.microemu.device.impl.ButtonName KEY_NUM0 -> KEY_NUM0
    org.microemu.device.impl.ButtonName KEY_NUM1 -> KEY_NUM1
    org.microemu.device.impl.ButtonName KEY_NUM2 -> KEY_NUM2
    org.microemu.device.impl.ButtonName KEY_NUM3 -> KEY_NUM3
    org.microemu.device.impl.ButtonName KEY_NUM4 -> KEY_NUM4
    org.microemu.device.impl.ButtonName KEY_NUM5 -> KEY_NUM5
    org.microemu.device.impl.ButtonName KEY_NUM6 -> KEY_NUM6
    org.microemu.device.impl.ButtonName KEY_NUM7 -> KEY_NUM7
    org.microemu.device.impl.ButtonName KEY_NUM8 -> KEY_NUM8
    org.microemu.device.impl.ButtonName KEY_NUM9 -> KEY_NUM9
    org.microemu.device.impl.ButtonName KEY_STAR -> KEY_STAR
    org.microemu.device.impl.ButtonName KEY_POUND -> KEY_POUND
    java.lang.String name -> a
    org.microemu.device.impl.ButtonName getButtonName(java.lang.String) -> getButtonName
    java.lang.String getName() -> getName
    java.lang.String toString() -> toString
org.microemu.device.impl.Color -> org.microemu.device.impl.Color:
    int value -> a
    int getRed() -> getRed
    int getGreen() -> getGreen
    int getBlue() -> getBlue
    int getRGB() -> getRGB
org.microemu.device.impl.DeviceDisplayImpl -> org.microemu.device.impl.DeviceDisplayImpl:
    javax.microedition.lcdui.Image createSystemImage(java.net.URL) -> createSystemImage
    org.microemu.device.impl.Button createButton(int,java.lang.String,org.microemu.device.impl.Shape,int,java.lang.String,java.lang.String,java.util.Hashtable,boolean) -> createButton
    org.microemu.device.impl.SoftButton createSoftButton(int,java.lang.String,org.microemu.device.impl.Shape,int,java.lang.String,org.microemu.device.impl.Rectangle,java.lang.String,java.util.Vector,javax.microedition.lcdui.Font) -> createSoftButton
    org.microemu.device.impl.SoftButton createSoftButton(int,java.lang.String,org.microemu.device.impl.Rectangle,javax.microedition.lcdui.Image,javax.microedition.lcdui.Image) -> createSoftButton
    void setNumColors(int) -> setNumColors
    void setIsColor(boolean) -> setIsColor
    void setNumAlphaLevels(int) -> setNumAlphaLevels
    void setBackgroundColor(org.microemu.device.impl.Color) -> setBackgroundColor
    void setForegroundColor(org.microemu.device.impl.Color) -> setForegroundColor
    void setDisplayRectangle(org.microemu.device.impl.Rectangle) -> setDisplayRectangle
    void setDisplayPaintable(org.microemu.device.impl.Rectangle) -> setDisplayPaintable
    void setMode123Image(org.microemu.device.impl.PositionedImage) -> setMode123Image
    void setModeAbcLowerImage(org.microemu.device.impl.PositionedImage) -> setModeAbcLowerImage
    void setModeAbcUpperImage(org.microemu.device.impl.PositionedImage) -> setModeAbcUpperImage
    boolean isResizable() -> isResizable
    void setResizable(boolean) -> setResizable
org.microemu.device.impl.DeviceImpl -> org.microemu.device.impl.DeviceImpl:
    java.lang.String name -> a
    org.microemu.device.EmulatorContext context -> a
    javax.microedition.lcdui.Image normalImage -> a
    javax.microedition.lcdui.Image overImage -> b
    javax.microedition.lcdui.Image pressedImage -> c
    java.util.Vector buttons -> a
    java.util.Vector softButtons -> b
    boolean hasPointerEvents -> a
    boolean hasPointerMotionEvents -> b
    boolean hasRepeatEvents -> c
    java.util.Map systemProperties -> a
    int skinVersion -> a
    java.lang.String DEFAULT_LOCATION -> DEFAULT_LOCATION
    java.lang.String RESIZABLE_LOCATION -> RESIZABLE_LOCATION
    java.lang.String descriptorLocation -> b
    java.util.Map specialInheritanceAttributeSet -> b
    org.microemu.device.impl.DeviceImpl create(org.microemu.device.EmulatorContext,java.lang.ClassLoader,java.lang.String,java.lang.Class) -> create
    void init() -> init
    void init(org.microemu.device.EmulatorContext) -> init
    void init(org.microemu.device.EmulatorContext,java.lang.String) -> init
    java.lang.String getDescriptorLocation() -> getDescriptorLocation
    void destroy() -> destroy
    java.lang.String getName() -> getName
    org.microemu.device.EmulatorContext getEmulatorContext() -> getEmulatorContext
    org.microemu.device.InputMethod getInputMethod() -> getInputMethod
    org.microemu.device.FontManager getFontManager() -> getFontManager
    org.microemu.device.DeviceDisplay getDeviceDisplay() -> getDeviceDisplay
    javax.microedition.lcdui.Image getNormalImage() -> getNormalImage
    javax.microedition.lcdui.Image getOverImage() -> getOverImage
    javax.microedition.lcdui.Image getPressedImage() -> getPressedImage
    java.util.Vector getSoftButtons() -> getSoftButtons
    java.util.Vector getButtons() -> getButtons
    void loadConfig(java.lang.ClassLoader,java.lang.String,nanoxml.XMLElement) -> a
    void parseFonts(java.lang.ClassLoader,java.lang.String,nanoxml.XMLElement) -> b
    void parseInput(nanoxml.XMLElement) -> a
    org.microemu.device.impl.Rectangle getRectangle(nanoxml.XMLElement) -> a
    org.microemu.device.impl.Polygon getPolygon(nanoxml.XMLElement) -> a
    boolean parseBoolean(java.lang.String) -> a
    boolean hasPointerEvents() -> hasPointerEvents
    boolean hasPointerMotionEvents() -> hasPointerMotionEvents
    boolean hasRepeatEvents() -> hasRepeatEvents
    boolean vibrate(int) -> vibrate
    java.util.Map getSystemProperties() -> getSystemProperties
    nanoxml.XMLElement loadDeviceDescriptor(java.lang.ClassLoader,java.lang.String) -> a
    nanoxml.XMLElement inheritXML(nanoxml.XMLElement,nanoxml.XMLElement,java.lang.String) -> a
    nanoxml.XMLElement loadXmlDocument(java.io.InputStream) -> a
    java.lang.String besourceBase(java.lang.String) -> a
    java.lang.String expandResourcePath(java.lang.String,java.lang.String) -> a
    java.net.URL getResourceUrl(java.lang.ClassLoader,java.lang.String,java.lang.String) -> a
    javax.microedition.lcdui.Image loadImage(java.lang.ClassLoader,java.lang.String,java.lang.String) -> a
org.microemu.device.impl.Font -> org.microemu.device.impl.Font:
    int charWidth(char) -> charWidth
    int charsWidth(char[],int,int) -> charsWidth
    int getBaselinePosition() -> getBaselinePosition
    int getHeight() -> getHeight
    int stringWidth(java.lang.String) -> stringWidth
org.microemu.device.impl.FontManagerImpl -> org.microemu.device.impl.FontManagerImpl:
    void setAntialiasing(boolean) -> setAntialiasing
    void setFont(java.lang.String,java.lang.String,java.lang.String,org.microemu.device.impl.Font) -> setFont
    org.microemu.device.impl.Font createSystemFont(java.lang.String,java.lang.String,int,boolean) -> createSystemFont
    org.microemu.device.impl.Font createTrueTypeFont(java.net.URL,java.lang.String,int,boolean) -> createTrueTypeFont
org.microemu.device.impl.InputMethodImpl -> org.microemu.device.impl.InputMethodImpl:
    boolean resetKey -> b
    org.microemu.device.impl.Button lastButton -> a
    int lastButtonCharIndex -> a
    boolean cancel -> a
    java.lang.Thread t -> a
    void dispose() -> dispose
    void run() -> run
    void setInputMethodListener(org.microemu.device.InputMethodListener) -> setInputMethodListener
    void pointerPressed(int,int) -> pointerPressed
    void pointerReleased(int,int) -> pointerReleased
    void pointerDragged(int,int) -> pointerDragged
    void insertText(java.lang.String) -> insertText
    char[] filterConstraints(char[]) -> filterConstraints
    char[] filterInputMode(char[]) -> filterInputMode
org.microemu.device.impl.Polygon -> org.microemu.device.impl.Polygon:
    int npoints -> a
    int[] xpoints -> a
    int[] ypoints -> b
    org.microemu.device.impl.Rectangle bounds -> a
    void addPoint(int,int) -> addPoint
    org.microemu.device.impl.Rectangle getBounds() -> getBounds
    boolean contains(int,int) -> contains
org.microemu.device.impl.PositionedImage -> org.microemu.device.impl.PositionedImage:
    javax.microedition.lcdui.Image image -> a
    org.microemu.device.impl.Rectangle rectangle -> a
    javax.microedition.lcdui.Image getImage() -> getImage
    org.microemu.device.impl.Rectangle getRectangle() -> getRectangle
org.microemu.device.impl.ui.CommandImplUI -> org.microemu.device.impl.ui.CommandImplUI:
    javax.microedition.lcdui.Command command -> a
    javax.microedition.lcdui.Command getCommand() -> getCommand
    void setImage(javax.microedition.lcdui.Image) -> setImage
org.microemu.device.impl.ui.CommandManager -> org.microemu.device.impl.ui.CommandManager:
    javax.microedition.lcdui.Command CMD_MENU -> CMD_MENU
    javax.microedition.lcdui.Command CMD_BACK -> a
    javax.microedition.lcdui.Command CMD_SELECT -> b
    org.microemu.device.impl.ui.CommandManager instance -> a
    javax.microedition.lcdui.List menuList -> a
    java.util.Vector menuCommands -> a
    javax.microedition.lcdui.Displayable previous -> a
    javax.microedition.lcdui.CommandListener menuCommandListener -> a
    void lateInit() -> a
    org.microemu.device.impl.ui.CommandManager getInstance() -> getInstance
    void commandAction(javax.microedition.lcdui.Command) -> commandAction
    void updateCommands(java.util.Vector) -> updateCommands
    void fillPossibleCommands(java.util.Vector,java.util.Vector) -> a
    javax.microedition.lcdui.List access$000(org.microemu.device.impl.ui.CommandManager) -> a
    void access$100(org.microemu.device.impl.ui.CommandManager) -> a
    javax.microedition.lcdui.Displayable access$200(org.microemu.device.impl.ui.CommandManager) -> a
    javax.microedition.lcdui.Command access$300() -> a
    java.util.Vector access$400(org.microemu.device.impl.ui.CommandManager) -> a
org.microemu.device.impl.ui.CommandManager$1 -> me2.u:
    org.microemu.device.impl.ui.CommandManager this$0 -> a
    void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable) -> commandAction
org.microemu.device.impl.ui.DisplayableImplUI -> org.microemu.device.impl.ui.DisplayableImplUI:
    javax.microedition.lcdui.Displayable displayable -> a
    java.util.Vector commands -> a
    void addCommandUI(org.microemu.device.ui.CommandUI) -> addCommandUI
    void removeCommandUI(org.microemu.device.ui.CommandUI) -> removeCommandUI
    void setCommandListener(javax.microedition.lcdui.CommandListener) -> setCommandListener
    javax.microedition.lcdui.CommandListener getCommandListener() -> getCommandListener
    void hideNotify() -> hideNotify
    void showNotify() -> showNotify
    void invalidate() -> invalidate
    java.util.Vector getCommandsUI() -> getCommandsUI
    void updateCommands() -> a
org.microemu.device.j2se.BWImageFilter -> org.microemu.device.j2se.BWImageFilter:
    double Yr -> a
    double Yg -> b
    double Yb -> c
    int filterRGB(int,int,int) -> filterRGB
org.microemu.device.j2se.GrayImageFilter -> org.microemu.device.j2se.GrayImageFilter:
    double Yr -> a
    double Yg -> b
    double Yb -> c
    double Rr -> d
    double Rg -> e
    double Rb -> f
    int filterRGB(int,int,int) -> filterRGB
org.microemu.device.j2se.J2SEButton -> org.microemu.device.j2se.J2SEButton:
    java.lang.String name -> a
    org.microemu.device.impl.ButtonName functionalName -> a
    org.microemu.device.impl.Shape shape -> a
    int[] keyboardKeys -> a
    java.lang.String keyboardCharCodes -> b
    int keyCode -> a
    java.util.Hashtable inputToChars -> a
    boolean modeChange -> a
    int getKeyboardKey() -> getKeyboardKey
    int getKeyCode() -> getKeyCode
    org.microemu.device.impl.ButtonName getFunctionalName() -> getFunctionalName
    int[] getKeyboardKeyCodes() -> getKeyboardKeyCodes
    char[] getKeyboardCharCodes() -> getKeyboardCharCodes
    boolean isModeChange() -> isModeChange
    char[] getChars(int) -> getChars
    boolean isChar(char,int) -> isChar
    java.lang.String getName() -> getName
    org.microemu.device.impl.Shape getShape() -> getShape
    int parseKeyboardKey(java.lang.String) -> a
org.microemu.device.j2se.J2SEButtonDefaultKeyCodes -> org.microemu.device.j2se.J2SEButtonDefaultKeyCodes:
    java.util.Map codes -> a
    java.util.Map backwardCompatibleNames -> b
    int[] getKeyCodes(org.microemu.device.impl.ButtonName) -> getKeyCodes
    java.lang.String getCharCodes(org.microemu.device.impl.ButtonName) -> getCharCodes
    org.microemu.device.j2se.J2SEButtonDefaultKeyCodes$KeyInformation code(org.microemu.device.impl.ButtonName,int) -> a
    org.microemu.device.j2se.J2SEButtonDefaultKeyCodes$KeyInformation code(org.microemu.device.impl.ButtonName,int,int) -> a
    org.microemu.device.impl.ButtonName getBackwardCompatibleName(int) -> getBackwardCompatibleName
org.microemu.device.j2se.J2SEButtonDefaultKeyCodes$KeyInformation -> me2.t:
    int[] keyCodes -> a
    java.lang.String charCodes -> a
org.microemu.device.j2se.J2SEDevice -> org.microemu.device.j2se.J2SEDevice:
    org.microemu.device.ui.UIFactory ui -> a
    org.microemu.device.ui.UIFactory getUIFactory() -> getUIFactory
org.microemu.device.j2se.J2SEDevice$1 -> me2.aq:
    org.microemu.device.ui.EventDispatcher createEventDispatcher(javax.microedition.lcdui.Display) -> createEventDispatcher
    org.microemu.device.ui.CommandUI createCommandUI(javax.microedition.lcdui.Command) -> createCommandUI
    org.microemu.device.ui.AlertUI createAlertUI(javax.microedition.lcdui.Alert) -> createAlertUI
    org.microemu.device.ui.CanvasUI createCanvasUI(javax.microedition.lcdui.Canvas) -> createCanvasUI
    org.microemu.device.ui.FormUI createFormUI(javax.microedition.lcdui.Form) -> createFormUI
    org.microemu.device.ui.ListUI createListUI(javax.microedition.lcdui.List) -> createListUI
    org.microemu.device.ui.TextBoxUI createTextBoxUI(javax.microedition.lcdui.TextBox) -> createTextBoxUI
    org.microemu.device.ui.ChoiceGroupUI createChoiceGroupUI(javax.microedition.lcdui.ChoiceGroup,int) -> createChoiceGroupUI
    org.microemu.device.ui.CustomItemUI createCustomItemUI(org.microemu.CustomItemAccess) -> createCustomItemUI
    org.microemu.device.ui.DateFieldUI createDateFieldUI(javax.microedition.lcdui.DateField) -> createDateFieldUI
    org.microemu.device.ui.GaugeUI createGaugeUI(javax.microedition.lcdui.Gauge) -> createGaugeUI
    org.microemu.device.ui.ImageStringItemUI createImageStringItemUI(javax.microedition.lcdui.Item) -> createImageStringItemUI
    org.microemu.device.ui.TextFieldUI createTextFieldUI(javax.microedition.lcdui.TextField) -> createTextFieldUI
org.microemu.device.j2se.J2SEDeviceButtonsHelper -> org.microemu.device.j2se.J2SEDeviceButtonsHelper:
    java.util.Map devices -> a
    org.microemu.device.impl.SoftButton getSoftButton(java.awt.event.MouseEvent) -> getSoftButton
    org.microemu.device.j2se.J2SEButton getSkinButton(java.awt.event.MouseEvent) -> getSkinButton
    org.microemu.device.j2se.J2SEButton getButton(java.awt.event.KeyEvent) -> getButton
    org.microemu.device.j2se.J2SEButton getButton(org.microemu.device.impl.ButtonName) -> getButton
    org.microemu.device.j2se.J2SEDeviceButtonsHelper$DeviceInformation getDeviceInformation() -> a
org.microemu.device.j2se.J2SEDeviceButtonsHelper$DeviceInformation -> me2.k:
    java.util.Map keyboardKeyCodes -> a
    java.util.Map keyboardCharCodes -> b
    java.util.Map functions -> c
org.microemu.device.j2se.J2SEDeviceDisplay -> org.microemu.device.j2se.J2SEDeviceDisplay:
    org.microemu.device.EmulatorContext context -> a
    org.microemu.device.impl.Rectangle displayRectangle -> a
    org.microemu.device.impl.Rectangle displayPaintable -> b
    boolean isColor -> a
    int numColors -> a
    int numAlphaLevels -> b
    java.awt.Color backgroundColor -> a
    java.awt.Color foregroundColor -> b
    org.microemu.device.impl.PositionedImage mode123Image -> a
    org.microemu.device.impl.PositionedImage modeAbcUpperImage -> b
    org.microemu.device.impl.PositionedImage modeAbcLowerImage -> c
    javax.microedition.lcdui.Image gameCanvasImage -> a
    boolean resizable -> b
    boolean flashBacklight(int) -> flashBacklight
    int getHeight() -> getHeight
    int getWidth() -> getWidth
    int getFullHeight() -> getFullHeight
    int getFullWidth() -> getFullWidth
    boolean isColor() -> isColor
    boolean isFullScreenMode() -> isFullScreenMode
    int numAlphaLevels() -> numAlphaLevels
    int numColors() -> numColors
    void paintControls(java.awt.Graphics) -> paintControls
    void paintDisplayable(org.microemu.device.j2se.J2SEGraphicsSurface,int,int,int,int) -> paintDisplayable
    void repaint(int,int,int,int) -> repaint
    void setScrollDown(boolean) -> setScrollDown
    void setScrollUp(boolean) -> setScrollUp
    boolean isResizable() -> isResizable
    void setResizable(boolean) -> setResizable
    org.microemu.device.impl.Rectangle getDisplayRectangle() -> getDisplayRectangle
    org.microemu.device.impl.Rectangle getDisplayPaintable() -> getDisplayPaintable
    org.microemu.device.impl.Color getBackgroundColor() -> getBackgroundColor
    org.microemu.device.impl.Color getForegroundColor() -> getForegroundColor
    javax.microedition.lcdui.Image createImage(int,int,boolean,int) -> createImage
    javax.microedition.lcdui.Image createImage(java.lang.String) -> createImage
    javax.microedition.lcdui.Image createImage(javax.microedition.lcdui.Image) -> createImage
    javax.microedition.lcdui.Image createImage(java.io.InputStream) -> createImage
    javax.microedition.lcdui.Image createRGBImage(int[],int,int,boolean) -> createRGBImage
    javax.microedition.lcdui.Image createImage(javax.microedition.lcdui.Image,int,int,int,int,int) -> createImage
    javax.microedition.lcdui.Image createImage(byte[],int,int) -> createImage
    javax.microedition.lcdui.Graphics getGraphics(javax.microedition.lcdui.game.GameCanvas) -> getGraphics
    void flushGraphics(javax.microedition.lcdui.game.GameCanvas,int,int,int,int) -> flushGraphics
    void setNumAlphaLevels(int) -> setNumAlphaLevels
    void setNumColors(int) -> setNumColors
    void setIsColor(boolean) -> setIsColor
    void setBackgroundColor(org.microemu.device.impl.Color) -> setBackgroundColor
    void setForegroundColor(org.microemu.device.impl.Color) -> setForegroundColor
    void setDisplayRectangle(org.microemu.device.impl.Rectangle) -> setDisplayRectangle
    void setDisplayPaintable(org.microemu.device.impl.Rectangle) -> setDisplayPaintable
    void setMode123Image(org.microemu.device.impl.PositionedImage) -> setMode123Image
    void setModeAbcLowerImage(org.microemu.device.impl.PositionedImage) -> setModeAbcLowerImage
    void setModeAbcUpperImage(org.microemu.device.impl.PositionedImage) -> setModeAbcUpperImage
    javax.microedition.lcdui.Image createSystemImage(java.net.URL) -> createSystemImage
    javax.microedition.lcdui.Image getImage(java.lang.String) -> a
    javax.microedition.lcdui.Image getImage(java.io.InputStream) -> a
    org.microemu.device.impl.Button createButton(int,java.lang.String,org.microemu.device.impl.Shape,int,java.lang.String,java.lang.String,java.util.Hashtable,boolean) -> createButton
    org.microemu.device.impl.SoftButton createSoftButton(int,java.lang.String,org.microemu.device.impl.Shape,int,java.lang.String,org.microemu.device.impl.Rectangle,java.lang.String,java.util.Vector,javax.microedition.lcdui.Font) -> createSoftButton
    org.microemu.device.impl.SoftButton createSoftButton(int,java.lang.String,org.microemu.device.impl.Rectangle,javax.microedition.lcdui.Image,javax.microedition.lcdui.Image) -> createSoftButton
org.microemu.device.j2se.J2SEDisplayGraphics -> org.microemu.device.j2se.J2SEDisplayGraphics:
    java.util.HashMap colorCache -> a
    org.microemu.device.j2se.J2SEGraphicsSurface graphicsSurface -> a
    java.awt.Graphics2D g -> a
    int color -> a
    java.awt.Rectangle clip -> a
    javax.microedition.lcdui.Font currentFont -> a
    int strokeStyle -> b
    java.awt.image.RGBImageFilter filter -> a
    int getColor() -> getColor
    void setColor(int) -> setColor
    javax.microedition.lcdui.Font getFont() -> getFont
    void setFont(javax.microedition.lcdui.Font) -> setFont
    int getStrokeStyle() -> getStrokeStyle
    void setStrokeStyle(int) -> setStrokeStyle
    void clipRect(int,int,int,int) -> clipRect
    void setClip(int,int,int,int) -> setClip
    int getClipX() -> getClipX
    int getClipY() -> getClipY
    int getClipHeight() -> getClipHeight
    int getClipWidth() -> getClipWidth
    void drawArc(int,int,int,int,int,int) -> drawArc
    void drawImage(javax.microedition.lcdui.Image,int,int,int) -> drawImage
    void drawLine(int,int,int,int) -> drawLine
    void drawRect(int,int,int,int) -> drawRect
    void drawRoundRect(int,int,int,int,int,int) -> drawRoundRect
    void drawString(java.lang.String,int,int,int) -> drawString
    void drawSubstring(java.lang.String,int,int,int,int,int) -> drawSubstring
    void fillArc(int,int,int,int,int,int) -> fillArc
    void fillRect(int,int,int,int) -> fillRect
    void fillRoundRect(int,int,int,int,int,int) -> fillRoundRect
    void translate(int,int) -> translate
    void drawRegion(javax.microedition.lcdui.Image,int,int,int,int,int,int,int,int) -> drawRegion
    void drawRGB(int[],int,int,int,int,int,int,boolean) -> drawRGB
    void fillTriangle(int,int,int,int,int,int) -> fillTriangle
    void copyArea(int,int,int,int,int,int,int) -> copyArea
    org.microemu.device.j2se.J2SEGraphicsSurface getGraphicsSurface() -> getGraphicsSurface
org.microemu.device.j2se.J2SEFont -> org.microemu.device.j2se.J2SEFont:
    java.awt.Font getFont() -> getFont
    void setAntialiasing(boolean) -> setAntialiasing
org.microemu.device.j2se.J2SEFontManager -> org.microemu.device.j2se.J2SEFontManager:
    java.lang.String FACE_SYSTEM_NAME -> a
    java.lang.String FACE_MONOSPACE_NAME -> b
    java.lang.String FACE_PROPORTIONAL_NAME -> c
    int SIZE_SMALL -> a
    int SIZE_MEDIUM -> b
    int SIZE_LARGE -> c
    java.util.Hashtable fonts -> a
    boolean antialiasing -> a
    org.microemu.device.impl.Font getFont(javax.microedition.lcdui.Font) -> a
    void init() -> init
    int charWidth(javax.microedition.lcdui.Font,char) -> charWidth
    int charsWidth(javax.microedition.lcdui.Font,char[],int,int) -> charsWidth
    int getBaselinePosition(javax.microedition.lcdui.Font) -> getBaselinePosition
    int getHeight(javax.microedition.lcdui.Font) -> getHeight
    int stringWidth(javax.microedition.lcdui.Font,java.lang.String) -> stringWidth
    int substringWidth(javax.microedition.lcdui.Font,java.lang.String,int,int) -> substringWidth
    boolean getAntialiasing() -> getAntialiasing
    void setAntialiasing(boolean) -> setAntialiasing
    void setFont(java.lang.String,java.lang.String,java.lang.String,org.microemu.device.impl.Font) -> setFont
    org.microemu.device.impl.Font createSystemFont(java.lang.String,java.lang.String,int,boolean) -> createSystemFont
    org.microemu.device.impl.Font createTrueTypeFont(java.net.URL,java.lang.String,int,boolean) -> createTrueTypeFont
org.microemu.device.j2se.J2SEGraphicsSurface -> org.microemu.device.j2se.J2SEGraphicsSurface:
    java.awt.image.DirectColorModel ALPHA_COLOR_MODEL -> a
    java.awt.image.DirectColorModel NO_ALPHA_COLOR_MODEL -> b
    int[] imageData -> a
    java.awt.image.BufferedImage image -> a
    java.awt.Graphics2D graphics -> a
    java.awt.Graphics2D getGraphics() -> getGraphics
    java.awt.image.BufferedImage getImage() -> getImage
    int[] getImageData() -> getImageData
org.microemu.device.j2se.J2SEImmutableImage -> org.microemu.device.j2se.J2SEImmutableImage:
    java.awt.Image img -> a
    int width -> a
    int height -> b
    int getHeight() -> getHeight
    java.awt.Image getImage() -> getImage
    int getWidth() -> getWidth
    void getRGB(int[],int,int,int,int,int,int) -> getRGB
org.microemu.device.j2se.J2SEImmutableImage$1 -> me2.e:
    org.microemu.device.j2se.J2SEImmutableImage this$0 -> a
    boolean imageUpdate(java.awt.Image,int,int,int,int,int) -> imageUpdate
org.microemu.device.j2se.J2SEImmutableImage$2 -> me2.d:
    org.microemu.device.j2se.J2SEImmutableImage this$0 -> a
    boolean imageUpdate(java.awt.Image,int,int,int,int,int) -> imageUpdate
org.microemu.device.j2se.J2SEInputMethod -> org.microemu.device.j2se.J2SEInputMethod:
    boolean eventAlreadyConsumed -> a
    org.microemu.device.j2se.J2SEButton ignoreButtonRelease -> a
    java.util.Timer keyReleasedDelayTimer -> a
    java.util.List repeatModeKeyCodes -> a
    int getGameAction(int) -> getGameAction
    int getKeyCode(int) -> getKeyCode
    java.lang.String getKeyName(int) -> getKeyName
    boolean fireInputMethodListener(org.microemu.device.j2se.J2SEButton,char) -> a
    void buttonTyped(org.microemu.device.j2se.J2SEButton) -> buttonTyped
    void clipboardPaste(java.lang.String) -> clipboardPaste
    void buttonPressed(org.microemu.device.j2se.J2SEButton,char) -> buttonPressed
    void buttonReleased(org.microemu.device.j2se.J2SEButton,char) -> buttonReleased
    org.microemu.device.j2se.J2SEButton getButton(java.awt.event.KeyEvent) -> getButton
org.microemu.device.j2se.J2SEInputMethod$KeyReleasedDelayTask -> me2.ac:
    int repeatModeKeyCode -> a
    org.microemu.device.j2se.J2SEInputMethod this$0 -> a
    void run() -> run
org.microemu.device.j2se.J2SEMutableImage -> org.microemu.device.j2se.J2SEMutableImage:
    org.microemu.device.j2se.J2SEGraphicsSurface graphicsSurface -> a
    java.awt.image.PixelGrabber grabber -> a
    int[] pixels -> a
    javax.microedition.lcdui.Graphics getGraphics() -> getGraphics
    boolean isMutable() -> isMutable
    int getHeight() -> getHeight
    java.awt.Image getImage() -> getImage
    int getWidth() -> getWidth
    int[] getData() -> getData
    void getRGB(int[],int,int,int,int,int,int) -> getRGB
org.microemu.device.j2se.J2SESoftButton -> org.microemu.device.j2se.J2SESoftButton:
    int LEFT -> LEFT
    int RIGHT -> RIGHT
    int type -> a
    javax.microedition.lcdui.Image normalImage -> a
    javax.microedition.lcdui.Image pressedImage -> b
    java.util.Vector commandTypes -> a
    javax.microedition.lcdui.Command command -> a
    org.microemu.device.impl.Rectangle paintable -> a
    int alignment -> b
    boolean visible -> b
    boolean pressed -> c
    javax.microedition.lcdui.Font font -> a
    int getType() -> getType
    void setCommand(javax.microedition.lcdui.Command) -> setCommand
    javax.microedition.lcdui.Command getCommand() -> getCommand
    org.microemu.device.impl.Rectangle getPaintable() -> getPaintable
    boolean isVisible() -> isVisible
    void setVisible(boolean) -> setVisible
    boolean isPressed() -> isPressed
    void setPressed(boolean) -> setPressed
    void paint(java.awt.Graphics) -> paint
    boolean preferredCommandType(javax.microedition.lcdui.Command) -> preferredCommandType
    void addCommandType(int) -> addCommandType
org.microemu.device.j2se.J2SESystemFont -> org.microemu.device.j2se.J2SESystemFont:
    java.awt.Graphics2D graphics -> a
    java.lang.String name -> a
    java.lang.String style -> b
    int size -> a
    boolean antialiasing -> a
    boolean initialized -> b
    java.awt.FontMetrics fontMetrics -> a
    void setAntialiasing(boolean) -> setAntialiasing
    int charWidth(char) -> charWidth
    int charsWidth(char[],int,int) -> charsWidth
    int getBaselinePosition() -> getBaselinePosition
    int getHeight() -> getHeight
    int stringWidth(java.lang.String) -> stringWidth
    java.awt.Font getFont() -> getFont
    void checkInitialized() -> a
org.microemu.device.j2se.J2SETrueTypeFont -> org.microemu.device.j2se.J2SETrueTypeFont:
    java.awt.Graphics2D graphics -> a
    java.net.URL url -> a
    java.lang.String style -> a
    int size -> a
    boolean antialiasing -> a
    boolean initialized -> b
    java.awt.FontMetrics fontMetrics -> a
    void setAntialiasing(boolean) -> setAntialiasing
    int charWidth(char) -> charWidth
    int charsWidth(char[],int,int) -> charsWidth
    int getBaselinePosition() -> getBaselinePosition
    int getHeight() -> getHeight
    int stringWidth(java.lang.String) -> stringWidth
    java.awt.Font getFont() -> getFont
    void checkInitialized() -> a
org.microemu.device.j2se.RGBImageFilter -> org.microemu.device.j2se.RGBImageFilter:
    double Rr -> a
    double Rg -> b
    double Rb -> c
    org.microemu.device.impl.Color backgroundColor -> a
    org.microemu.device.impl.Color foregroundColor -> b
    int filterRGB(int,int,int) -> filterRGB
org.microemu.device.j2se.ui.J2SEAlertUI -> org.microemu.device.j2se.ui.J2SEAlertUI:
    void setString(java.lang.String) -> setString
org.microemu.device.j2se.ui.J2SECanvasUI -> org.microemu.device.j2se.ui.J2SECanvasUI:
org.microemu.device.j2se.ui.J2SEChoiceGroupUI -> org.microemu.device.j2se.ui.J2SEChoiceGroupUI:
    void setDefaultCommand(javax.microedition.lcdui.Command) -> setDefaultCommand
    void setLabel(java.lang.String) -> setLabel
    void delete(int) -> delete
    void deleteAll() -> deleteAll
    void setSelectedIndex(int,boolean) -> setSelectedIndex
    int getSelectedIndex() -> getSelectedIndex
    void insert(int,java.lang.String,javax.microedition.lcdui.Image) -> insert
    boolean isSelected(int) -> isSelected
    void setSelectedFlags(boolean[]) -> setSelectedFlags
    int getSelectedFlags(boolean[]) -> getSelectedFlags
    java.lang.String getString(int) -> getString
    void set(int,java.lang.String,javax.microedition.lcdui.Image) -> set
    int size() -> size
org.microemu.device.j2se.ui.J2SECustomItemUI -> org.microemu.device.j2se.ui.J2SECustomItemUI:
    void setDefaultCommand(javax.microedition.lcdui.Command) -> setDefaultCommand
    void setLabel(java.lang.String) -> setLabel
    void repaint() -> repaint
org.microemu.device.j2se.ui.J2SEDateFieldUI -> org.microemu.device.j2se.ui.J2SEDateFieldUI:
    void setDefaultCommand(javax.microedition.lcdui.Command) -> setDefaultCommand
    void setLabel(java.lang.String) -> setLabel
    void setInputMode(int) -> setInputMode
    void setDate(java.util.Date) -> setDate
    java.util.Date getDate() -> getDate
org.microemu.device.j2se.ui.J2SEFormUI -> org.microemu.device.j2se.ui.J2SEFormUI:
    javax.microedition.lcdui.ItemStateListener itemStateListener -> a
    int append(org.microemu.device.ui.ItemUI) -> append
    void delete(int) -> delete
    void deleteAll() -> deleteAll
    void insert(int,org.microemu.device.ui.ItemUI) -> insert
    void set(int,org.microemu.device.ui.ItemUI) -> set
    void setItemStateListener(javax.microedition.lcdui.ItemStateListener) -> setItemStateListener
    javax.microedition.lcdui.ItemStateListener getItemStateListener() -> getItemStateListener
org.microemu.device.j2se.ui.J2SEGaugeUI -> org.microemu.device.j2se.ui.J2SEGaugeUI:
    void setDefaultCommand(javax.microedition.lcdui.Command) -> setDefaultCommand
    void setLabel(java.lang.String) -> setLabel
    void setValue(int) -> setValue
    int getValue() -> getValue
    void setMaxValue(int) -> setMaxValue
org.microemu.device.j2se.ui.J2SEImageStringItemUI -> org.microemu.device.j2se.ui.J2SEImageStringItemUI:
    void setDefaultCommand(javax.microedition.lcdui.Command) -> setDefaultCommand
    void setLabel(java.lang.String) -> setLabel
    void setImage(javax.microedition.lcdui.Image) -> setImage
    void setText(java.lang.String) -> setText
org.microemu.device.j2se.ui.J2SEListUI -> org.microemu.device.j2se.ui.J2SEListUI:
    int append(java.lang.String,javax.microedition.lcdui.Image) -> append
    void setSelectCommand(javax.microedition.lcdui.Command) -> setSelectCommand
    int getSelectedIndex() -> getSelectedIndex
    void setSelectedIndex(int,boolean) -> setSelectedIndex
    java.lang.String getString(int) -> getString
    void delete(int) -> delete
    void deleteAll() -> deleteAll
    void insert(int,java.lang.String,javax.microedition.lcdui.Image) -> insert
    void set(int,java.lang.String,javax.microedition.lcdui.Image) -> set
    int size() -> size
org.microemu.device.j2se.ui.J2SETextBoxUI -> org.microemu.device.j2se.ui.J2SETextBoxUI:
    java.lang.String text -> a
    int getCaretPosition() -> getCaretPosition
    java.lang.String getString() -> getString
    void setString(java.lang.String) -> setString
    void insert(java.lang.String,int) -> insert
    void delete(int,int) -> delete
org.microemu.device.j2se.ui.J2SETextFieldUI -> org.microemu.device.j2se.ui.J2SETextFieldUI:
    void setDefaultCommand(javax.microedition.lcdui.Command) -> setDefaultCommand
    void setLabel(java.lang.String) -> setLabel
    void setConstraints(int) -> setConstraints
    void setString(java.lang.String) -> setString
    java.lang.String getString() -> getString
org.microemu.log.Logger -> me2.at:
    java.lang.String FQCN -> a
    java.util.Set fqcnSet -> a
    java.util.Set logFunctionsSet -> b
    boolean java13 -> a
    boolean locationEnabled -> b
    java.util.List loggerAppenders -> a
    java.lang.StackTraceElement getLocation() -> a
    void write(int,java.lang.String,java.lang.Throwable) -> a
    void write(int,java.lang.String,java.lang.Throwable,java.lang.Object) -> a
    void debug(java.lang.String) -> a
    void debug(java.lang.String,java.lang.Throwable) -> a
    void debug(java.lang.String,java.lang.String) -> a
    void debug(java.lang.String,java.lang.Object) -> a
    void debugClassLoader(java.lang.String,java.lang.Object) -> b
    void info(java.lang.String) -> b
    void info(java.lang.Object) -> a
    void warn(java.lang.String) -> c
    void error(java.lang.String) -> d
    void error(java.lang.Object) -> b
    void error(java.lang.String,java.lang.String,java.lang.Throwable) -> a
    void error(java.lang.Throwable) -> a
    void error(java.lang.String,java.lang.Throwable) -> b
    void callAppenders(org.microemu.log.LoggingEvent) -> a
    void addLogOrigin(java.lang.Class) -> a
org.microemu.log.LoggerDataWrapper -> me2.l:
    java.lang.String text -> a
    java.lang.String toString() -> toString
org.microemu.log.LoggingEvent -> me2.h:
    int level -> a
    java.lang.String message -> a
    java.lang.StackTraceElement location -> a
    boolean hasData -> a
    java.lang.Object data -> a
    java.lang.Throwable throwable -> a
    java.lang.Object getData() -> a
    boolean hasData() -> a
    int getLevel() -> a
    java.lang.StackTraceElement getLocation() -> a
    java.lang.String getMessage() -> a
    java.lang.Throwable getThrowable() -> a
org.microemu.log.StdOutAppender -> me2.v:
    boolean enabled -> a
    void append(org.microemu.log.LoggingEvent) -> a
org.microemu.microedition.io.ConnectionInvocationHandler -> me2.c:
    javax.microedition.io.Connection originalConnection -> a
    java.security.AccessControlContext acc -> a
    java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[]) -> invoke
    javax.microedition.io.Connection access$000(org.microemu.microedition.io.ConnectionInvocationHandler) -> a
org.microemu.microedition.io.ConnectionInvocationHandler$1 -> me2.i:
    java.lang.reflect.Method val$method -> a
    java.lang.Object[] val$args -> a
    org.microemu.microedition.io.ConnectionInvocationHandler this$0 -> a
    java.lang.Object run() -> run
org.microemu.microedition.io.ConnectorImpl -> org.microemu.microedition.io.ConnectorImpl:
    java.security.AccessControlContext acc -> acc
    boolean debugConnectionInvocations -> debugConnectionInvocations
    boolean needPrivilegedCalls -> needPrivilegedCalls
    boolean isWebstart() -> isWebstart
    javax.microedition.io.Connection open(java.lang.String,int,boolean) -> open
    java.lang.Class[] getAllInterfaces(java.lang.Class) -> getAllInterfaces
    javax.microedition.io.Connection openSecureProxy(java.lang.String,int,boolean,boolean) -> openSecureProxy
    javax.microedition.io.Connection openSecure(java.lang.String,int,boolean) -> openSecure
    boolean access$000(org.microemu.microedition.io.ConnectorImpl) -> access$000
    javax.microedition.io.Connection access$100(org.microemu.microedition.io.ConnectorImpl,java.lang.String,int,boolean,boolean) -> access$100
    javax.microedition.io.Connection access$200(org.microemu.microedition.io.ConnectorImpl,java.lang.String,int,boolean) -> access$200
org.microemu.microedition.io.ConnectorImpl$1 -> me2.g:
    java.lang.String val$name -> a
    int val$mode -> a
    boolean val$timeouts -> a
    org.microemu.microedition.io.ConnectorImpl this$0 -> a
    java.lang.Object run() -> run
org.microemu.util.JadMidletEntry -> me2.am:
    java.lang.String name -> b
    java.lang.String icon -> c
    java.lang.String className -> a
    java.lang.String toString() -> toString
org.microemu.util.JadProperties -> me2.ad:
    java.lang.String MIDLET_PREFIX -> a
    java.util.Vector midletEntries -> a
    void clear() -> clear
    java.util.Vector getMidletEntries() -> a
    java.lang.String getProperty(java.lang.String,java.lang.String) -> a
    java.lang.String getProperty(java.lang.String) -> a
    void read(java.io.InputStream) -> read
    void readJad(java.io.ByteArrayInputStream) -> a
org.microemu.util.MemoryRecordStoreManager -> me2.an:
    java.util.Hashtable recordStores -> a
    org.microemu.util.ExtendedRecordListener recordListener -> a
    void init(org.microemu.MicroEmulator) -> init
    java.lang.String getName() -> getName
    void deleteRecordStore(java.lang.String) -> deleteRecordStore
    javax.microedition.rms.RecordStore openRecordStore(java.lang.String,boolean) -> openRecordStore
    java.lang.String[] listRecordStores() -> listRecordStores
    void deleteRecord(org.microemu.util.RecordStoreImpl,int) -> deleteRecord
    void loadRecord(org.microemu.util.RecordStoreImpl,int) -> loadRecord
    void saveRecord(org.microemu.util.RecordStoreImpl,int) -> saveRecord
    void deleteStores() -> deleteStores
    int getSizeAvailable(org.microemu.util.RecordStoreImpl) -> getSizeAvailable
    void setRecordListener(org.microemu.util.ExtendedRecordListener) -> setRecordListener
    void fireRecordStoreListener(int,java.lang.String) -> fireRecordStoreListener
org.microemu.util.ThreadUtils -> me2.ao:
    boolean java13 -> a
    boolean java14 -> b
    java.util.Timer createTimer(java.lang.String) -> a
    java.lang.String getCallLocation(java.lang.String) -> a
    java.lang.String getTreadStackTrace(java.lang.Thread) -> a
