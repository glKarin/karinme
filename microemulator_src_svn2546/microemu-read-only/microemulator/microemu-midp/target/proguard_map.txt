javax.microedition.io.CommConnection -> javax.microedition.io.CommConnection:
    int getBaudRate() -> getBaudRate
    int setBaudRate(int) -> setBaudRate
javax.microedition.io.HttpConnection -> javax.microedition.io.HttpConnection:
    java.lang.String HEAD -> HEAD
    java.lang.String GET -> GET
    java.lang.String POST -> POST
    int HTTP_OK -> HTTP_OK
    int HTTP_CREATED -> HTTP_CREATED
    int HTTP_ACCEPTED -> HTTP_ACCEPTED
    int HTTP_NOT_AUTHORITATIVE -> HTTP_NOT_AUTHORITATIVE
    int HTTP_NO_CONTENT -> HTTP_NO_CONTENT
    int HTTP_RESET -> HTTP_RESET
    int HTTP_PARTIAL -> HTTP_PARTIAL
    int HTTP_MULT_CHOICE -> HTTP_MULT_CHOICE
    int HTTP_MOVED_PERM -> HTTP_MOVED_PERM
    int HTTP_MOVED_TEMP -> HTTP_MOVED_TEMP
    int HTTP_SEE_OTHER -> HTTP_SEE_OTHER
    int HTTP_NOT_MODIFIED -> HTTP_NOT_MODIFIED
    int HTTP_USE_PROXY -> HTTP_USE_PROXY
    int HTTP_TEMP_REDIRECT -> HTTP_TEMP_REDIRECT
    int HTTP_BAD_REQUEST -> HTTP_BAD_REQUEST
    int HTTP_UNAUTHORIZED -> HTTP_UNAUTHORIZED
    int HTTP_PAYMENT_REQUIRED -> HTTP_PAYMENT_REQUIRED
    int HTTP_FORBIDDEN -> HTTP_FORBIDDEN
    int HTTP_NOT_FOUND -> HTTP_NOT_FOUND
    int HTTP_BAD_METHOD -> HTTP_BAD_METHOD
    int HTTP_NOT_ACCEPTABLE -> HTTP_NOT_ACCEPTABLE
    int HTTP_PROXY_AUTH -> HTTP_PROXY_AUTH
    int HTTP_CLIENT_TIMEOUT -> HTTP_CLIENT_TIMEOUT
    int HTTP_CONFLICT -> HTTP_CONFLICT
    int HTTP_GONE -> HTTP_GONE
    int HTTP_LENGTH_REQUIRED -> HTTP_LENGTH_REQUIRED
    int HTTP_PRECON_FAILED -> HTTP_PRECON_FAILED
    int HTTP_ENTITY_TOO_LARGE -> HTTP_ENTITY_TOO_LARGE
    int HTTP_REQ_TOO_LONG -> HTTP_REQ_TOO_LONG
    int HTTP_UNSUPPORTED_TYPE -> HTTP_UNSUPPORTED_TYPE
    int HTTP_UNSUPPORTED_RANGE -> HTTP_UNSUPPORTED_RANGE
    int HTTP_EXPECT_FAILED -> HTTP_EXPECT_FAILED
    int HTTP_INTERNAL_ERROR -> HTTP_INTERNAL_ERROR
    int HTTP_NOT_IMPLEMENTED -> HTTP_NOT_IMPLEMENTED
    int HTTP_BAD_GATEWAY -> HTTP_BAD_GATEWAY
    int HTTP_UNAVAILABLE -> HTTP_UNAVAILABLE
    int HTTP_GATEWAY_TIMEOUT -> HTTP_GATEWAY_TIMEOUT
    int HTTP_VERSION -> HTTP_VERSION
    java.lang.String getURL() -> getURL
    java.lang.String getProtocol() -> getProtocol
    java.lang.String getHost() -> getHost
    java.lang.String getFile() -> getFile
    java.lang.String getRef() -> getRef
    java.lang.String getQuery() -> getQuery
    int getPort() -> getPort
    java.lang.String getRequestMethod() -> getRequestMethod
    void setRequestMethod(java.lang.String) -> setRequestMethod
    java.lang.String getRequestProperty(java.lang.String) -> getRequestProperty
    void setRequestProperty(java.lang.String,java.lang.String) -> setRequestProperty
    int getResponseCode() -> getResponseCode
    java.lang.String getResponseMessage() -> getResponseMessage
    long getExpiration() -> getExpiration
    long getDate() -> getDate
    long getLastModified() -> getLastModified
    java.lang.String getHeaderField(java.lang.String) -> getHeaderField
    int getHeaderFieldInt(java.lang.String,int) -> getHeaderFieldInt
    long getHeaderFieldDate(java.lang.String,long) -> getHeaderFieldDate
    java.lang.String getHeaderField(int) -> getHeaderField
    java.lang.String getHeaderFieldKey(int) -> getHeaderFieldKey
javax.microedition.io.HttpsConnection -> javax.microedition.io.HttpsConnection:
    javax.microedition.io.SecurityInfo getSecurityInfo() -> getSecurityInfo
    int getPort() -> getPort
javax.microedition.io.PushRegistry -> javax.microedition.io.PushRegistry:
    org.microemu.microedition.io.PushRegistryDelegate impl -> a
    void registerConnection(java.lang.String,java.lang.String,java.lang.String) -> registerConnection
    boolean unregisterConnection(java.lang.String) -> unregisterConnection
    java.lang.String[] listConnections(boolean) -> listConnections
    java.lang.String getMIDlet(java.lang.String) -> getMIDlet
    java.lang.String getFilter(java.lang.String) -> getFilter
    long registerAlarm(java.lang.String,long) -> registerAlarm
javax.microedition.io.SecureConnection -> javax.microedition.io.SecureConnection:
    javax.microedition.io.SecurityInfo getSecurityInfo() -> getSecurityInfo
javax.microedition.io.SecurityInfo -> javax.microedition.io.SecurityInfo:
    javax.microedition.pki.Certificate getServerCertificate() -> getServerCertificate
    java.lang.String getProtocolVersion() -> getProtocolVersion
    java.lang.String getProtocolName() -> getProtocolName
    java.lang.String getCipherSuite() -> getCipherSuite
javax.microedition.io.ServerSocketConnection -> javax.microedition.io.ServerSocketConnection:
    java.lang.String getLocalAddress() -> getLocalAddress
    int getLocalPort() -> getLocalPort
javax.microedition.io.SocketConnection -> javax.microedition.io.SocketConnection:
    byte DELAY -> DELAY
    byte LINGER -> LINGER
    byte KEEPALIVE -> KEEPALIVE
    byte RCVBUF -> RCVBUF
    byte SNDBUF -> SNDBUF
    void setSocketOption(byte,int) -> setSocketOption
    int getSocketOption(byte) -> getSocketOption
    java.lang.String getLocalAddress() -> getLocalAddress
    int getLocalPort() -> getLocalPort
    java.lang.String getAddress() -> getAddress
    int getPort() -> getPort
javax.microedition.io.UDPDatagramConnection -> javax.microedition.io.UDPDatagramConnection:
    java.lang.String getLocalAddress() -> getLocalAddress
    int getLocalPort() -> getLocalPort
javax.microedition.lcdui.Alert -> javax.microedition.lcdui.Alert:
    int FOREVER -> FOREVER
    javax.microedition.lcdui.ImageStringItem alertContent -> j
    javax.microedition.lcdui.AlertType type -> k
    javax.microedition.lcdui.Command DISMISS_COMMAND -> DISMISS_COMMAND
    int time -> l
    javax.microedition.lcdui.Gauge indicator -> m
    javax.microedition.lcdui.Displayable nextDisplayable -> a
    javax.microedition.lcdui.CommandListener defaultListener -> n
    void addCommand(javax.microedition.lcdui.Command) -> addCommand
    void removeCommand(javax.microedition.lcdui.Command) -> removeCommand
    int getDefaultTimeout() -> getDefaultTimeout
    java.lang.String getString() -> getString
    int getTimeout() -> getTimeout
    javax.microedition.lcdui.AlertType getType() -> getType
    void setType(javax.microedition.lcdui.AlertType) -> setType
    void setCommandListener(javax.microedition.lcdui.CommandListener) -> setCommandListener
    javax.microedition.lcdui.Image getImage() -> getImage
    void setImage(javax.microedition.lcdui.Image) -> setImage
    javax.microedition.lcdui.Gauge getIndicator() -> getIndicator
    void setIndicator(javax.microedition.lcdui.Gauge) -> setIndicator
    void setString(java.lang.String) -> setString
    void setTimeout(int) -> setTimeout
    int paintContent(javax.microedition.lcdui.Graphics) -> a
    void showNotify() -> showNotify
    int traverse(int,int,int) -> a
javax.microedition.lcdui.Alert$1 -> javax.microedition.lcdui.b:
    void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable) -> commandAction
javax.microedition.lcdui.AlertType -> javax.microedition.lcdui.AlertType:
    javax.microedition.lcdui.AlertType INFO -> INFO
    javax.microedition.lcdui.AlertType WARNING -> WARNING
    javax.microedition.lcdui.AlertType ERROR -> ERROR
    javax.microedition.lcdui.AlertType ALARM -> ALARM
    javax.microedition.lcdui.AlertType CONFIRMATION -> CONFIRMATION
    boolean playSound(javax.microedition.lcdui.Display) -> playSound
javax.microedition.lcdui.Canvas -> javax.microedition.lcdui.Canvas:
    int UP -> UP
    int DOWN -> DOWN
    int LEFT -> LEFT
    int RIGHT -> RIGHT
    int FIRE -> FIRE
    int GAME_A -> GAME_A
    int GAME_B -> GAME_B
    int GAME_C -> GAME_C
    int GAME_D -> GAME_D
    int KEY_NUM0 -> KEY_NUM0
    int KEY_NUM1 -> KEY_NUM1
    int KEY_NUM2 -> KEY_NUM2
    int KEY_NUM3 -> KEY_NUM3
    int KEY_NUM4 -> KEY_NUM4
    int KEY_NUM5 -> KEY_NUM5
    int KEY_NUM6 -> KEY_NUM6
    int KEY_NUM7 -> KEY_NUM7
    int KEY_NUM8 -> KEY_NUM8
    int KEY_NUM9 -> KEY_NUM9
    int KEY_STAR -> KEY_STAR
    int KEY_POUND -> KEY_POUND
    int getGameAction(int) -> getGameAction
    int getKeyCode(int) -> getKeyCode
    java.lang.String getKeyName(int) -> getKeyName
    boolean hasPointerEvents() -> hasPointerEvents
    boolean hasPointerMotionEvents() -> hasPointerMotionEvents
    boolean hasRepeatEvents() -> hasRepeatEvents
    void hideNotify() -> hideNotify
    boolean isDoubleBuffered() -> isDoubleBuffered
    void keyPressed(int) -> keyPressed
    void keyRepeated(int) -> keyRepeated
    void keyReleased(int) -> keyReleased
    void paint(javax.microedition.lcdui.Graphics) -> paint
    void pointerPressed(int,int) -> pointerPressed
    void pointerReleased(int,int) -> pointerReleased
    void pointerDragged(int,int) -> pointerDragged
    void repaint() -> repaint
    void repaint(int,int,int,int) -> repaint
    void serviceRepaints() -> serviceRepaints
    void setFullScreenMode(boolean) -> setFullScreenMode
    void sizeChanged(int,int) -> sizeChanged
    void showNotify() -> showNotify
javax.microedition.lcdui.Choice -> javax.microedition.lcdui.Choice:
    int EXCLUSIVE -> EXCLUSIVE
    int MULTIPLE -> MULTIPLE
    int IMPLICIT -> IMPLICIT
    int POPUP -> POPUP
    int TEXT_WRAP_ON -> TEXT_WRAP_ON
    int TEXT_WRAP_OFF -> TEXT_WRAP_OFF
    int TEXT_WRAP_DEFAULT -> TEXT_WRAP_DEFAULT
    int append(java.lang.String,javax.microedition.lcdui.Image) -> append
    void delete(int) -> delete
    void deleteAll() -> deleteAll
    int getFitPolicy() -> getFitPolicy
    javax.microedition.lcdui.Font getFont(int) -> getFont
    javax.microedition.lcdui.Image getImage(int) -> getImage
    int getSelectedFlags(boolean[]) -> getSelectedFlags
    int getSelectedIndex() -> getSelectedIndex
    java.lang.String getString(int) -> getString
    void insert(int,java.lang.String,javax.microedition.lcdui.Image) -> insert
    boolean isSelected(int) -> isSelected
    void set(int,java.lang.String,javax.microedition.lcdui.Image) -> set
    void setFitPolicy(int) -> setFitPolicy
    void setFont(int,javax.microedition.lcdui.Font) -> setFont
    void setSelectedFlags(boolean[]) -> setSelectedFlags
    void setSelectedIndex(int,boolean) -> setSelectedIndex
    int size() -> size
javax.microedition.lcdui.ChoiceGroup -> javax.microedition.lcdui.ChoiceGroup:
    int choiceType -> h
    javax.microedition.lcdui.ChoiceGroup$ChoiceItem[] items -> i
    int numOfItems -> j
    int fitPolicy -> k
    int highlightedItemIndex -> l
    javax.microedition.lcdui.List popupList -> m
    byte[] multiOff -> n
    byte[] multiOn -> o
    byte[] radioOff -> p
    byte[] radioOn -> q
    javax.microedition.lcdui.Image imgMultiOff -> r
    javax.microedition.lcdui.Image imgMultiOn -> s
    javax.microedition.lcdui.Image imgRadioOff -> t
    javax.microedition.lcdui.Image imgRadioOn -> u
    int append(java.lang.String,javax.microedition.lcdui.Image) -> append
    void delete(int) -> delete
    void deleteAll() -> deleteAll
    int getFitPolicy() -> getFitPolicy
    javax.microedition.lcdui.Font getFont(int) -> getFont
    javax.microedition.lcdui.Image getImage(int) -> getImage
    int getSelectedFlags(boolean[]) -> getSelectedFlags
    int getSelectedIndex() -> getSelectedIndex
    java.lang.String getString(int) -> getString
    void insert(int,java.lang.String,javax.microedition.lcdui.Image) -> insert
    boolean isSelected(int) -> isSelected
    void set(int,java.lang.String,javax.microedition.lcdui.Image) -> set
    void setFitPolicy(int) -> setFitPolicy
    void setFont(int,javax.microedition.lcdui.Font) -> setFont
    void setSelectedFlags(boolean[]) -> setSelectedFlags
    void setSelectedIndex(int,boolean) -> setSelectedIndex
    int size() -> size
    boolean isFocusable() -> b
    int getHeight() -> a
    int getItemIndexAt(int,int) -> a
    int getHeightToItem(int) -> a
    int getItemHeight(int) -> b
    int paint(javax.microedition.lcdui.Graphics) -> a
    boolean select() -> c
    int traverse(int,int,int,boolean) -> a
    void repaint() -> repaint
    javax.microedition.lcdui.Image access$000() -> f
    javax.microedition.lcdui.Image access$100() -> g
    javax.microedition.lcdui.Image access$200() -> h
    javax.microedition.lcdui.Image access$300() -> i
javax.microedition.lcdui.ChoiceGroup$ChoiceItem -> javax.microedition.lcdui.v:
    boolean selected -> j
    javax.microedition.lcdui.Font font -> k
    javax.microedition.lcdui.Image box -> l
    javax.microedition.lcdui.ChoiceGroup this$0 -> m
    javax.microedition.lcdui.Font getFont() -> f
    void setImage(javax.microedition.lcdui.Image) -> a
    int getHeight() -> a
    int paint(javax.microedition.lcdui.Graphics) -> a
    boolean isSelected() -> g
    void setFont(javax.microedition.lcdui.Font) -> a
    void setSelectedState(boolean) -> b
javax.microedition.lcdui.ChoiceGroup$ImplicitListener -> javax.microedition.lcdui.u:
    javax.microedition.lcdui.ChoiceGroup this$0 -> a
    void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable) -> commandAction
javax.microedition.lcdui.Command -> javax.microedition.lcdui.Command:
    int SCREEN -> SCREEN
    int BACK -> BACK
    int CANCEL -> CANCEL
    int OK -> OK
    int HELP -> HELP
    int STOP -> STOP
    int EXIT -> EXIT
    int ITEM -> ITEM
    javax.microedition.lcdui.Command originalCommand -> b
    javax.microedition.lcdui.Item focusedItem -> c
    javax.microedition.lcdui.Command itemCommand -> d
    java.lang.String label -> e
    int commandType -> f
    int priority -> g
    org.microemu.device.ui.CommandUI ui -> a
    int getCommandType() -> getCommandType
    java.lang.String getLabel() -> getLabel
    java.lang.String getLongLabel() -> getLongLabel
    int getPriority() -> getPriority
    void setImage(javax.microedition.lcdui.Image) -> setImage
    javax.microedition.lcdui.Item getFocusedItem() -> a
    javax.microedition.lcdui.Command getItemCommand(javax.microedition.lcdui.Item) -> a
    javax.microedition.lcdui.Command getOriginalCommand() -> b
    boolean isRegularCommand() -> c
javax.microedition.lcdui.CommandListener -> javax.microedition.lcdui.CommandListener:
    void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable) -> commandAction
javax.microedition.lcdui.CustomItem -> javax.microedition.lcdui.CustomItem:
    int TRAVERSE_HORIZONTAL -> TRAVERSE_HORIZONTAL
    int TRAVERSE_VERTICAL -> TRAVERSE_VERTICAL
    int KEY_PRESS -> KEY_PRESS
    int KEY_RELEASE -> KEY_RELEASE
    int KEY_REPEAT -> KEY_REPEAT
    int POINTER_PRESS -> POINTER_PRESS
    int POINTER_RELEASE -> POINTER_RELEASE
    int POINTER_DRAG -> POINTER_DRAG
    int NONE -> NONE
    int width -> h
    int height -> i
    int getGameAction(int) -> getGameAction
    int getInteractionModes() -> getInteractionModes
    int getMinContentHeight() -> getMinContentHeight
    int getMinContentWidth() -> getMinContentWidth
    int getPrefContentHeight(int) -> getPrefContentHeight
    int getPrefContentWidth(int) -> getPrefContentWidth
    void hideNotify() -> hideNotify
    void invalidate() -> invalidate
    void keyPressed(int) -> keyPressed
    void keyReleased(int) -> keyReleased
    void keyRepeated(int) -> keyRepeated
    void paint(javax.microedition.lcdui.Graphics,int,int) -> paint
    void pointerDragged(int,int) -> pointerDragged
    void pointerPressed(int,int) -> pointerPressed
    void pointerReleased(int,int) -> pointerReleased
    void repaint() -> repaint
    void repaint(int,int,int,int) -> repaint
    void showNotify() -> showNotify
    void sizeChanged(int,int) -> sizeChanged
    boolean traverse(int,int,int,int[]) -> traverse
    void traverseOut() -> traverseOut
    int paint(javax.microedition.lcdui.Graphics) -> a
    int getHeight() -> a
    int traverse(int,int,int,boolean) -> a
    boolean isFocusable() -> b
    boolean select() -> c
javax.microedition.lcdui.CustomItem$1 -> javax.microedition.lcdui.p:
    javax.microedition.lcdui.CustomItem this$0 -> a
    javax.microedition.lcdui.CustomItem getCustomItem() -> getCustomItem
    int getPrefContentWidth(int) -> getPrefContentWidth
    int getPrefContentHeight(int) -> getPrefContentHeight
    void paint(javax.microedition.lcdui.Graphics,int,int) -> paint
javax.microedition.lcdui.DateCanvas -> javax.microedition.lcdui.q:
    java.util.Calendar cal -> a
    int month -> j
    int day -> k
    int year -> l
    int selected -> m
    java.util.Date getTime() -> e
    void setTime(java.util.Date) -> a
    void paint(javax.microedition.lcdui.Graphics) -> paint
    void keyPressed(int) -> keyPressed
javax.microedition.lcdui.DateField -> javax.microedition.lcdui.DateField:
    int DATE -> DATE
    int TIME -> TIME
    int DATE_TIME -> DATE_TIME
    java.util.Date date -> h
    java.util.Date time -> i
    java.lang.String label -> n
    int mode -> o
    javax.microedition.lcdui.ChoiceGroup dateTime -> p
    javax.microedition.lcdui.DateCanvas dateCanvas -> j
    javax.microedition.lcdui.TimeCanvas timeCanvas -> k
    javax.microedition.lcdui.Command saveCommand -> l
    javax.microedition.lcdui.Command backCommand -> m
    javax.microedition.lcdui.CommandListener dateTimeListener -> q
    java.util.Date getDate() -> getDate
    void setDate(java.util.Date) -> setDate
    int getInputMode() -> getInputMode
    void setInputMode(int) -> setInputMode
    boolean isFocusable() -> b
    int getHeight() -> a
    int paint(javax.microedition.lcdui.Graphics) -> a
    void setFocus(boolean) -> a
    boolean select() -> c
    int traverse(int,int,int,boolean) -> a
    void updateDateTimeString() -> f
javax.microedition.lcdui.DateField$1 -> javax.microedition.lcdui.k:
    javax.microedition.lcdui.DateField this$0 -> a
    void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable) -> commandAction
javax.microedition.lcdui.Display -> javax.microedition.lcdui.Display:
    int LIST_ELEMENT -> LIST_ELEMENT
    int CHOICE_GROUP_ELEMENT -> CHOICE_GROUP_ELEMENT
    int ALERT -> ALERT
    int COLOR_BACKGROUND -> COLOR_BACKGROUND
    int COLOR_FOREGROUND -> COLOR_FOREGROUND
    int COLOR_HIGHLIGHTED_BACKGROUND -> COLOR_HIGHLIGHTED_BACKGROUND
    int COLOR_HIGHLIGHTED_FOREGROUND -> COLOR_HIGHLIGHTED_FOREGROUND
    int COLOR_BORDER -> COLOR_BORDER
    int COLOR_HIGHLIGHTED_BORDER -> COLOR_HIGHLIGHTED_BORDER
    javax.microedition.lcdui.Displayable current -> a
    javax.microedition.lcdui.Display$DisplayAccessor accessor -> b
    org.microemu.device.ui.EventDispatcher eventDispatcher -> c
    java.util.Timer timer -> d
    void callSerially(java.lang.Runnable) -> callSerially
    int numAlphaLevels() -> numAlphaLevels
    int numColors() -> numColors
    boolean flashBacklight(int) -> flashBacklight
    javax.microedition.lcdui.Display getDisplay(javax.microedition.midlet.MIDlet) -> getDisplay
    int getColor(int) -> getColor
    int getBorderStyle(boolean) -> getBorderStyle
    int getBestImageWidth(int) -> getBestImageWidth
    int getBestImageHeight(int) -> getBestImageHeight
    javax.microedition.lcdui.Displayable getCurrent() -> getCurrent
    boolean isColor() -> isColor
    void setCurrent(javax.microedition.lcdui.Displayable) -> setCurrent
    void setCurrent(javax.microedition.lcdui.Alert,javax.microedition.lcdui.Displayable) -> setCurrent
    void setCurrentItem(javax.microedition.lcdui.Item) -> setCurrentItem
    boolean vibrate(int) -> vibrate
    int getGameAction(int) -> a
    boolean isShown(javax.microedition.lcdui.Displayable) -> a
    void repaint(javax.microedition.lcdui.Displayable,int,int,int,int) -> a
    void serviceRepaints() -> a
    void setScrollDown(boolean) -> a
    void setScrollUp(boolean) -> b
    javax.microedition.lcdui.Displayable access$000(javax.microedition.lcdui.Display) -> a
    org.microemu.device.ui.EventDispatcher access$100(javax.microedition.lcdui.Display) -> b
    java.util.Timer access$200(javax.microedition.lcdui.Display) -> c
    javax.microedition.lcdui.Displayable access$002(javax.microedition.lcdui.Display,javax.microedition.lcdui.Displayable) -> a
javax.microedition.lcdui.Display$1 -> javax.microedition.lcdui.x:
    javax.microedition.lcdui.Displayable val$nextDisplayable -> b
    javax.microedition.lcdui.Display this$0 -> a
    void run() -> run
javax.microedition.lcdui.Display$1$1 -> javax.microedition.lcdui.c:
    javax.microedition.lcdui.Displayable displayable -> a
    javax.microedition.lcdui.Display$1 this$1 -> b
    void run() -> run
javax.microedition.lcdui.Display$AlertTimeout -> javax.microedition.lcdui.i:
    javax.microedition.lcdui.Alert alert -> a
    void run() -> run
javax.microedition.lcdui.Display$DisplayAccessor -> javax.microedition.lcdui.l:
    javax.microedition.lcdui.Display display -> b
    javax.microedition.lcdui.Display this$0 -> a
    void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable) -> commandAction
    void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Item) -> commandAction
    javax.microedition.lcdui.Display getDisplay() -> getDisplay
    void processGameCanvasKeyEvent(javax.microedition.lcdui.game.GameCanvas,int,boolean) -> a
    void keyPressed(int) -> keyPressed
    void keyRepeated(int) -> keyRepeated
    void keyReleased(int) -> keyReleased
    void pointerPressed(int,int) -> pointerPressed
    void pointerReleased(int,int) -> pointerReleased
    void pointerDragged(int,int) -> pointerDragged
    void paint(javax.microedition.lcdui.Graphics) -> paint
    javax.microedition.lcdui.Displayable getCurrent() -> getCurrent
    org.microemu.device.ui.DisplayableUI getDisplayableUI(javax.microedition.lcdui.Displayable) -> getDisplayableUI
    org.microemu.device.ui.ItemUI getItemUI(javax.microedition.lcdui.Item) -> getItemUI
    boolean isFullScreenMode() -> isFullScreenMode
    void hideNotify() -> hideNotify
    void setCurrent(javax.microedition.lcdui.Displayable) -> setCurrent
    void sizeChanged() -> sizeChanged
    void repaint() -> repaint
    void clean() -> clean
javax.microedition.lcdui.Display$DisplayAccessor$1 -> javax.microedition.lcdui.d:
    javax.microedition.lcdui.CommandListener val$listener -> a
    javax.microedition.lcdui.Command val$c -> b
    javax.microedition.lcdui.Displayable val$d -> c
    void run() -> run
javax.microedition.lcdui.Display$DisplayAccessor$2 -> javax.microedition.lcdui.e:
    javax.microedition.lcdui.ItemCommandListener val$listener -> a
    javax.microedition.lcdui.Command val$c -> b
    javax.microedition.lcdui.Item val$item -> c
    void run() -> run
javax.microedition.lcdui.Display$DisplayAccessor$3 -> javax.microedition.lcdui.h:
    int val$x -> a
    int val$y -> b
    javax.microedition.lcdui.Display$DisplayAccessor this$1 -> c
    void run() -> run
javax.microedition.lcdui.Display$DisplayAccessor$4 -> javax.microedition.lcdui.j:
    int val$x -> a
    int val$y -> b
    javax.microedition.lcdui.Display$DisplayAccessor this$1 -> c
    void run() -> run
javax.microedition.lcdui.Display$DisplayAccessor$5 -> javax.microedition.lcdui.f:
    int val$x -> a
    int val$y -> b
    javax.microedition.lcdui.Display$DisplayAccessor this$1 -> c
    void run() -> run
javax.microedition.lcdui.Display$DisplayAccessor$6 -> javax.microedition.lcdui.g:
    javax.microedition.lcdui.Displayable displayable -> a
    javax.microedition.lcdui.Display$DisplayAccessor this$1 -> b
    void run() -> run
javax.microedition.lcdui.Display$HideNotifyEvent -> javax.microedition.lcdui.m:
javax.microedition.lcdui.Display$KeyEvent -> javax.microedition.lcdui.w:
    short type -> b
    int keyCode -> c
    javax.microedition.lcdui.Display this$0 -> d
    void run() -> run
javax.microedition.lcdui.Display$ShowNotifyEvent -> javax.microedition.lcdui.a:
javax.microedition.lcdui.DisplayUtils -> javax.microedition.lcdui.DisplayUtils:
    org.microemu.device.ui.DisplayableUI getDisplayableUI(javax.microedition.lcdui.Displayable) -> getDisplayableUI
javax.microedition.lcdui.Displayable -> javax.microedition.lcdui.Displayable:
    org.microemu.device.Device device -> b
    javax.microedition.lcdui.Display currentDisplay -> c
    int width -> d
    int height -> e
    boolean fullScreenMode -> f
    javax.microedition.lcdui.Ticker ticker -> a
    int viewPortY -> g
    int viewPortHeight -> h
    org.microemu.device.ui.DisplayableUI ui -> i
    java.lang.String title -> j
    javax.microedition.lcdui.CommandListener listener -> k
    void addCommand(javax.microedition.lcdui.Command) -> addCommand
    void removeCommand(javax.microedition.lcdui.Command) -> removeCommand
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    boolean isShown() -> isShown
    javax.microedition.lcdui.Ticker getTicker() -> getTicker
    void setTicker(javax.microedition.lcdui.Ticker) -> setTicker
    java.lang.String getTitle() -> getTitle
    void setTitle(java.lang.String) -> setTitle
    void setCommandListener(javax.microedition.lcdui.CommandListener) -> setCommandListener
    javax.microedition.lcdui.CommandListener getCommandListener() -> a
    java.util.Vector getCommands() -> b
    void hideNotify() -> hideNotify
    void hideNotify$297a162c() -> c
    void keyPressed(int) -> keyPressed
    void keyRepeated(int) -> keyRepeated
    void keyReleased(int) -> keyReleased
    void pointerPressed(int,int) -> pointerPressed
    void pointerReleased(int,int) -> pointerReleased
    void pointerDragged(int,int) -> pointerDragged
    void paint(javax.microedition.lcdui.Graphics) -> paint
    void repaint() -> repaint
    void repaint(int,int,int,int) -> repaint
    void sizeChanged(int,int) -> sizeChanged
    void sizeChanged$297a162c() -> d
    void showNotify() -> showNotify
    void showNotify(javax.microedition.lcdui.Display) -> a
    void updateWidthAndHeight() -> e
javax.microedition.lcdui.Font -> javax.microedition.lcdui.Font:
    int STYLE_PLAIN -> STYLE_PLAIN
    int STYLE_BOLD -> STYLE_BOLD
    int STYLE_ITALIC -> STYLE_ITALIC
    int STYLE_UNDERLINED -> STYLE_UNDERLINED
    int SIZE_SMALL -> SIZE_SMALL
    int SIZE_MEDIUM -> SIZE_MEDIUM
    int SIZE_LARGE -> SIZE_LARGE
    int FACE_SYSTEM -> FACE_SYSTEM
    int FACE_MONOSPACE -> FACE_MONOSPACE
    int FACE_PROPORTIONAL -> FACE_PROPORTIONAL
    int FONT_STATIC_TEXT -> FONT_STATIC_TEXT
    int FONT_INPUT_TEXT -> FONT_INPUT_TEXT
    javax.microedition.lcdui.Font DEFAULT_FONT -> a
    javax.microedition.lcdui.Font[] fontsBySpecifier -> b
    java.util.Hashtable fonts -> c
    int face -> d
    int style -> e
    int size -> f
    int baselinePosition -> g
    int height -> h
    javax.microedition.lcdui.Font getDefaultFont() -> getDefaultFont
    javax.microedition.lcdui.Font getFont(int) -> getFont
    javax.microedition.lcdui.Font getFont(int,int,int) -> getFont
    int getStyle() -> getStyle
    int getSize() -> getSize
    int getFace() -> getFace
    boolean isPlain() -> isPlain
    boolean isBold() -> isBold
    boolean isItalic() -> isItalic
    boolean isUnderlined() -> isUnderlined
    int getHeight() -> getHeight
    int getBaselinePosition() -> getBaselinePosition
    int charWidth(char) -> charWidth
    int charsWidth(char[],int,int) -> charsWidth
    int stringWidth(java.lang.String) -> stringWidth
    int substringWidth(java.lang.String,int,int) -> substringWidth
    int hashCode() -> hashCode
javax.microedition.lcdui.Form -> javax.microedition.lcdui.Form:
    javax.microedition.lcdui.Item[] items -> a
    int numOfItems -> j
    int focusItemIndex -> k
    int append(javax.microedition.lcdui.Item) -> append
    int append(javax.microedition.lcdui.Image) -> append
    int append(java.lang.String) -> append
    void delete(int) -> delete
    void deleteAll() -> deleteAll
    javax.microedition.lcdui.Item get(int) -> get
    int getHeight() -> getHeight
    int getWidth() -> getWidth
    void insert(int,javax.microedition.lcdui.Item) -> insert
    void set(int,javax.microedition.lcdui.Item) -> set
    void setItemStateListener(javax.microedition.lcdui.ItemStateListener) -> setItemStateListener
    int size() -> size
    int paintContent(javax.microedition.lcdui.Graphics) -> a
    void fireItemStateListener(javax.microedition.lcdui.Item) -> a
    void fireItemStateListener() -> e
    void keyPressed(int) -> keyPressed
    void showNotify() -> showNotify
    void hideNotify() -> hideNotify
    int traverse(int,int,int) -> a
    int getTopVisibleIndex(int) -> a
    int getHeightToItem(int) -> b
    void verifyItem(javax.microedition.lcdui.Item) -> b
    void verifyItemNum(int) -> c
    java.util.Vector getCommands() -> b
javax.microedition.lcdui.Gauge -> javax.microedition.lcdui.Gauge:
    int HEIGHT -> h
    int value -> i
    int maxValue -> j
    boolean interactive -> k
    int INDEFINITE -> INDEFINITE
    int CONTINUOUS_IDLE -> CONTINUOUS_IDLE
    int INCREMENTAL_IDLE -> INCREMENTAL_IDLE
    int CONTINUOUS_RUNNING -> CONTINUOUS_RUNNING
    int INCREMENTAL_UPDATING -> INCREMENTAL_UPDATING
    int indefiniteFrame -> l
    void setValue(int) -> setValue
    int getValue() -> getValue
    void setMaxValue(int) -> setMaxValue
    int getMaxValue() -> getMaxValue
    boolean isInteractive() -> isInteractive
    boolean hasIndefiniteRange() -> f
    int getHeight() -> a
    boolean isFocusable() -> b
    void keyPressed(int) -> keyPressed
    int paint(javax.microedition.lcdui.Graphics) -> a
    int traverse(int,int,int,boolean) -> a
    void setPreferredSize(int,int) -> setPreferredSize
    void setLayout(int) -> setLayout
    void setLabel(java.lang.String) -> setLabel
    void addCommand(javax.microedition.lcdui.Command) -> addCommand
    void setDefaultCommand(javax.microedition.lcdui.Command) -> setDefaultCommand
    void setItemCommandListener(javax.microedition.lcdui.ItemCommandListener) -> setItemCommandListener
javax.microedition.lcdui.Graphics -> javax.microedition.lcdui.Graphics:
    int SOLID -> SOLID
    int DOTTED -> DOTTED
    int LEFT -> LEFT
    int RIGHT -> RIGHT
    int TOP -> TOP
    int BASELINE -> BASELINE
    int BOTTOM -> BOTTOM
    int HCENTER -> HCENTER
    int VCENTER -> VCENTER
    int translateX -> a
    int translateY -> b
    void clipRect(int,int,int,int) -> clipRect
    void drawArc(int,int,int,int,int,int) -> drawArc
    void drawChar(char,int,int,int) -> drawChar
    void drawChars(char[],int,int,int,int,int) -> drawChars
    void drawImage(javax.microedition.lcdui.Image,int,int,int) -> drawImage
    void drawLine(int,int,int,int) -> drawLine
    void drawRect(int,int,int,int) -> drawRect
    void drawRoundRect(int,int,int,int,int,int) -> drawRoundRect
    void drawString(java.lang.String,int,int,int) -> drawString
    void drawSubstring(java.lang.String,int,int,int,int,int) -> drawSubstring
    void fillArc(int,int,int,int,int,int) -> fillArc
    void fillRect(int,int,int,int) -> fillRect
    void fillRoundRect(int,int,int,int,int,int) -> fillRoundRect
    int getBlueComponent() -> getBlueComponent
    int getClipHeight() -> getClipHeight
    int getClipWidth() -> getClipWidth
    int getClipX() -> getClipX
    int getClipY() -> getClipY
    int getColor() -> getColor
    javax.microedition.lcdui.Font getFont() -> getFont
    int getGrayScale() -> getGrayScale
    int getGreenComponent() -> getGreenComponent
    int getRedComponent() -> getRedComponent
    int getStrokeStyle() -> getStrokeStyle
    int getTranslateX() -> getTranslateX
    int getTranslateY() -> getTranslateY
    void setClip(int,int,int,int) -> setClip
    void setColor(int) -> setColor
    void setColor(int,int,int) -> setColor
    void setFont(javax.microedition.lcdui.Font) -> setFont
    void setGrayScale(int) -> setGrayScale
    void setStrokeStyle(int) -> setStrokeStyle
    void translate(int,int) -> translate
    void drawRegion(javax.microedition.lcdui.Image,int,int,int,int,int,int,int,int) -> drawRegion
    void drawRGB(int[],int,int,int,int,int,int,boolean) -> drawRGB
    void fillTriangle(int,int,int,int,int,int) -> fillTriangle
    void copyArea(int,int,int,int,int,int,int) -> copyArea
    int getDisplayColor(int) -> getDisplayColor
    void implementationError() -> a
javax.microedition.lcdui.Image -> javax.microedition.lcdui.Image:
    javax.microedition.lcdui.Image createImage(int,int) -> createImage
    javax.microedition.lcdui.Image createImage(java.lang.String) -> createImage
    javax.microedition.lcdui.Image createImage(javax.microedition.lcdui.Image) -> createImage
    javax.microedition.lcdui.Image createImage(byte[],int,int) -> createImage
    javax.microedition.lcdui.Graphics getGraphics() -> getGraphics
    int getHeight() -> getHeight
    int getWidth() -> getWidth
    boolean isMutable() -> isMutable
    void getRGB(int[],int,int,int,int,int,int) -> getRGB
    javax.microedition.lcdui.Image createImage(java.io.InputStream) -> createImage
    javax.microedition.lcdui.Image createImage(javax.microedition.lcdui.Image,int,int,int,int,int) -> createImage
    javax.microedition.lcdui.Image createRGBImage(int[],int,int,boolean) -> createRGBImage
javax.microedition.lcdui.ImageItem -> javax.microedition.lcdui.ImageItem:
    int LAYOUT_DEFAULT -> LAYOUT_DEFAULT
    int LAYOUT_LEFT -> LAYOUT_LEFT
    int LAYOUT_RIGHT -> LAYOUT_RIGHT
    int LAYOUT_CENTER -> LAYOUT_CENTER
    int LAYOUT_NEWLINE_BEFORE -> LAYOUT_NEWLINE_BEFORE
    int LAYOUT_NEWLINE_AFTER -> LAYOUT_NEWLINE_AFTER
    javax.microedition.lcdui.Image img -> h
    java.lang.String altText -> i
    int appearanceMode -> j
    java.lang.String getAltText() -> getAltText
    int getAppearanceMode() -> getAppearanceMode
    javax.microedition.lcdui.Image getImage() -> getImage
    int getLayout() -> getLayout
    void setAltText(java.lang.String) -> setAltText
    void setImage(javax.microedition.lcdui.Image) -> setImage
    void setLayout(int) -> setLayout
    int getHeight() -> a
    int paint(javax.microedition.lcdui.Graphics) -> a
    int traverse(int,int,int,boolean) -> a
javax.microedition.lcdui.ImageStringItem -> javax.microedition.lcdui.y:
    javax.microedition.lcdui.Image img -> h
    javax.microedition.lcdui.StringComponent stringComponent -> i
    void setImage(javax.microedition.lcdui.Image) -> a
    void setText(java.lang.String) -> a
    int getHeight() -> a
    void invertPaint(boolean) -> c
    int paint(javax.microedition.lcdui.Graphics) -> a
javax.microedition.lcdui.Item -> javax.microedition.lcdui.Item:
    int LAYOUT_DEFAULT -> LAYOUT_DEFAULT
    int LAYOUT_LEFT -> LAYOUT_LEFT
    int LAYOUT_RIGHT -> LAYOUT_RIGHT
    int LAYOUT_CENTER -> LAYOUT_CENTER
    int LAYOUT_TOP -> LAYOUT_TOP
    int LAYOUT_BOTTOM -> LAYOUT_BOTTOM
    int LAYOUT_VCENTER -> LAYOUT_VCENTER
    int LAYOUT_NEWLINE_BEFORE -> LAYOUT_NEWLINE_BEFORE
    int LAYOUT_NEWLINE_AFTER -> LAYOUT_NEWLINE_AFTER
    int LAYOUT_SHRINK -> LAYOUT_SHRINK
    int LAYOUT_EXPAND -> LAYOUT_EXPAND
    int LAYOUT_VSHRINK -> LAYOUT_VSHRINK
    int LAYOUT_VEXPAND -> LAYOUT_VEXPAND
    int LAYOUT_2 -> LAYOUT_2
    int PLAIN -> PLAIN
    int HYPERLINK -> HYPERLINK
    int BUTTON -> BUTTON
    org.microemu.device.ui.ItemUI ui -> a
    javax.microedition.lcdui.StringComponent labelComponent -> h
    javax.microedition.lcdui.Screen owner -> b
    boolean focus -> i
    int layout -> c
    java.util.Vector commands -> d
    javax.microedition.lcdui.Command defaultCommand -> j
    javax.microedition.lcdui.ItemCommandListener commandListener -> e
    int prefWidth -> f
    int prefHeight -> g
    void addCommand(javax.microedition.lcdui.Command) -> addCommand
    java.lang.String getLabel() -> getLabel
    int getLayout() -> getLayout
    int getMinimumHeight() -> getMinimumHeight
    int getMinimumWidth() -> getMinimumWidth
    int getPreferredHeight() -> getPreferredHeight
    int getPreferredWidth() -> getPreferredWidth
    void notifyStateChanged() -> notifyStateChanged
    void removeCommand(javax.microedition.lcdui.Command) -> removeCommand
    void setDefaultCommand(javax.microedition.lcdui.Command) -> setDefaultCommand
    void setItemCommandListener(javax.microedition.lcdui.ItemCommandListener) -> setItemCommandListener
    void setLabel(java.lang.String) -> setLabel
    void setLayout(int) -> setLayout
    void setPreferredSize(int,int) -> setPreferredSize
    void repaintOwner() -> d
    int getHeight() -> a
    boolean isFocusable() -> b
    void keyPressed(int) -> keyPressed
    int paint(javax.microedition.lcdui.Graphics) -> a
    void paintContent(javax.microedition.lcdui.Graphics) -> b
    void repaint() -> repaint
    boolean hasFocus() -> e
    void setFocus(boolean) -> a
    void setOwner(javax.microedition.lcdui.Screen) -> a
    boolean select() -> c
    int traverse(int,int,int,boolean) -> a
    int getMaximumWidth() -> f
javax.microedition.lcdui.ItemCommandListener -> javax.microedition.lcdui.ItemCommandListener:
    void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Item) -> commandAction
javax.microedition.lcdui.ItemStateListener -> javax.microedition.lcdui.ItemStateListener:
    void itemStateChanged(javax.microedition.lcdui.Item) -> itemStateChanged
javax.microedition.lcdui.List -> javax.microedition.lcdui.List:
    javax.microedition.lcdui.Command SELECT_COMMAND -> SELECT_COMMAND
    javax.microedition.lcdui.ChoiceGroup choiceGroup -> a
    javax.microedition.lcdui.Command selCommand -> j
    int initialPressedItem -> k
    int append(java.lang.String,javax.microedition.lcdui.Image) -> append
    void delete(int) -> delete
    void deleteAll() -> deleteAll
    int getFitPolicy() -> getFitPolicy
    javax.microedition.lcdui.Font getFont(int) -> getFont
    javax.microedition.lcdui.Image getImage(int) -> getImage
    int getSelectedFlags(boolean[]) -> getSelectedFlags
    int getSelectedIndex() -> getSelectedIndex
    java.lang.String getString(int) -> getString
    void insert(int,java.lang.String,javax.microedition.lcdui.Image) -> insert
    boolean isSelected(int) -> isSelected
    void removeCommand(javax.microedition.lcdui.Command) -> removeCommand
    void set(int,java.lang.String,javax.microedition.lcdui.Image) -> set
    void setFitPolicy(int) -> setFitPolicy
    void setFont(int,javax.microedition.lcdui.Font) -> setFont
    void setSelectCommand(javax.microedition.lcdui.Command) -> setSelectCommand
    void setSelectedFlags(boolean[]) -> setSelectedFlags
    void setSelectedIndex(int,boolean) -> setSelectedIndex
    void setTicker(javax.microedition.lcdui.Ticker) -> setTicker
    void setTitle(java.lang.String) -> setTitle
    void keyPressed(int) -> keyPressed
    void pointerPressed(int,int) -> pointerPressed
    void pointerReleased(int,int) -> pointerReleased
    int paintContent(javax.microedition.lcdui.Graphics) -> a
    int size() -> size
    void showNotify() -> showNotify
    int traverse(int,int,int) -> a
javax.microedition.lcdui.Screen -> javax.microedition.lcdui.Screen:
    int traverse(int,int,int) -> a
    void keyPressed(int) -> keyPressed
    void hideNotify() -> hideNotify
    void keyRepeated(int) -> keyRepeated
    void paint(javax.microedition.lcdui.Graphics) -> paint
    int paintContent(javax.microedition.lcdui.Graphics) -> a
    void repaint() -> repaint
    void showNotify() -> showNotify
javax.microedition.lcdui.Spacer -> javax.microedition.lcdui.Spacer:
    int minWidth -> h
    int minHeight -> i
    javax.microedition.lcdui.Spacer$SpacerCustomItem customItem -> j
    void setLabel(java.lang.String) -> setLabel
    void addCommand(javax.microedition.lcdui.Command) -> addCommand
    void setDefaultCommand(javax.microedition.lcdui.Command) -> setDefaultCommand
    void setMinimumSize(int,int) -> setMinimumSize
    int paint(javax.microedition.lcdui.Graphics) -> a
    javax.microedition.lcdui.Spacer$SpacerCustomItem access$000(javax.microedition.lcdui.Spacer) -> a
    int access$100(javax.microedition.lcdui.Spacer) -> b
    int access$200(javax.microedition.lcdui.Spacer) -> c
javax.microedition.lcdui.Spacer$1 -> javax.microedition.lcdui.s:
    javax.microedition.lcdui.Spacer this$0 -> a
    javax.microedition.lcdui.CustomItem getCustomItem() -> getCustomItem
    int getPrefContentWidth(int) -> getPrefContentWidth
    int getPrefContentHeight(int) -> getPrefContentHeight
    void paint(javax.microedition.lcdui.Graphics,int,int) -> paint
javax.microedition.lcdui.Spacer$SpacerCustomItem -> javax.microedition.lcdui.r:
    javax.microedition.lcdui.Spacer this$0 -> h
    int getMinContentWidth() -> getMinContentWidth
    int getMinContentHeight() -> getMinContentHeight
    int getPrefContentWidth(int) -> getPrefContentWidth
    int getPrefContentHeight(int) -> getPrefContentHeight
    void paint(javax.microedition.lcdui.Graphics,int,int) -> paint
javax.microedition.lcdui.StringComponent -> javax.microedition.lcdui.z:
    java.lang.String text -> a
    int[] breaks -> b
    boolean invertPaint -> c
    int numOfBreaks -> d
    int width -> e
    int widthDecreaser -> f
    int getCharPositionX(int) -> a
    int getCharPositionY(int) -> b
    int getHeight() -> a
    java.lang.String getText() -> b
    void invertPaint(boolean) -> a
    int paint(javax.microedition.lcdui.Graphics) -> a
    void setText(java.lang.String) -> a
    void setWidthDecreaser(int) -> c
    void insertBreak(int) -> d
    void updateBreaks() -> c
javax.microedition.lcdui.StringItem -> javax.microedition.lcdui.StringItem:
    javax.microedition.lcdui.StringComponent stringComponent -> h
    int appearanceMode -> i
    int getAppearanceMode() -> getAppearanceMode
    javax.microedition.lcdui.Font getFont() -> getFont
    void setFont(javax.microedition.lcdui.Font) -> setFont
    void setPreferredSize(int,int) -> setPreferredSize
    java.lang.String getText() -> getText
    void setText(java.lang.String) -> setText
    int getHeight() -> a
    int paint(javax.microedition.lcdui.Graphics) -> a
    int traverse(int,int,int,boolean) -> a
javax.microedition.lcdui.TextBox -> javax.microedition.lcdui.TextBox:
    javax.microedition.lcdui.TextField tf -> a
    org.microemu.device.InputMethodListener inputMethodListener -> j
    void delete(int,int) -> delete
    int getCaretPosition() -> getCaretPosition
    int getChars(char[]) -> getChars
    int getConstraints() -> getConstraints
    int getMaxSize() -> getMaxSize
    java.lang.String getString() -> getString
    void insert(char[],int,int,int) -> insert
    void insert(java.lang.String,int) -> insert
    void setChars(char[],int,int) -> setChars
    void setConstraints(int) -> setConstraints
    void setInitialInputMode(java.lang.String) -> setInitialInputMode
    int setMaxSize(int) -> setMaxSize
    void setString(java.lang.String) -> setString
    void setTicker(javax.microedition.lcdui.Ticker) -> setTicker
    void setTitle(java.lang.String) -> setTitle
    int size() -> size
    void hideNotify() -> hideNotify
    int paintContent(javax.microedition.lcdui.Graphics) -> a
    void setCaretPosition(int) -> a
    void showNotify() -> showNotify
    int traverse(int,int,int) -> a
javax.microedition.lcdui.TextBox$1 -> javax.microedition.lcdui.t:
    javax.microedition.lcdui.TextBox this$0 -> a
    void caretPositionChanged(org.microemu.device.InputMethodEvent) -> caretPositionChanged
    void inputMethodTextChanged(org.microemu.device.InputMethodEvent) -> inputMethodTextChanged
    int getCaretPosition() -> getCaretPosition
    java.lang.String getText() -> getText
    int getConstraints() -> getConstraints
javax.microedition.lcdui.TextField -> javax.microedition.lcdui.TextField:
    int ANY -> ANY
    int EMAILADDR -> EMAILADDR
    int NUMERIC -> NUMERIC
    int PHONENUMBER -> PHONENUMBER
    int URL -> URL
    int DECIMAL -> DECIMAL
    int PASSWORD -> PASSWORD
    int UNEDITABLE -> UNEDITABLE
    int SENSITIVE -> SENSITIVE
    int NON_PREDICTIVE -> NON_PREDICTIVE
    int INITIAL_CAPS_WORD -> INITIAL_CAPS_WORD
    int INITIAL_CAPS_SENTENCE -> INITIAL_CAPS_SENTENCE
    int CONSTRAINT_MASK -> CONSTRAINT_MASK
    javax.microedition.lcdui.StringComponent stringComponent -> h
    java.lang.String field -> i
    int caret -> j
    boolean caretVisible -> k
    int maxSize -> l
    int constraints -> m
    org.microemu.device.InputMethodListener inputMethodListener -> n
    java.lang.String getString() -> getString
    void setString(java.lang.String) -> setString
    void setString(java.lang.String,int) -> a
    int getChars(char[]) -> getChars
    void setChars(char[],int,int) -> setChars
    void insert(java.lang.String,int) -> insert
    void insert(char[],int,int,int) -> insert
    void delete(int,int) -> delete
    int getMaxSize() -> getMaxSize
    int setMaxSize(int) -> setMaxSize
    int size() -> size
    int getCaretPosition() -> getCaretPosition
    void setConstraints(int) -> setConstraints
    int getConstraints() -> getConstraints
    void setInitialInputMode(java.lang.String) -> setInitialInputMode
    boolean isFocusable() -> b
    int getHeight() -> a
    int paint(javax.microedition.lcdui.Graphics) -> a
    void paintContent(javax.microedition.lcdui.Graphics) -> b
    void setCaretPosition(int) -> a
    void setCaretVisible(boolean) -> b
    int traverse(int,int,int,boolean) -> a
    void setFocus(boolean) -> a
javax.microedition.lcdui.TextField$1 -> javax.microedition.lcdui.o:
    javax.microedition.lcdui.TextField this$0 -> a
    void caretPositionChanged(org.microemu.device.InputMethodEvent) -> caretPositionChanged
    void inputMethodTextChanged(org.microemu.device.InputMethodEvent) -> inputMethodTextChanged
    int getCaretPosition() -> getCaretPosition
    java.lang.String getText() -> getText
    int getConstraints() -> getConstraints
javax.microedition.lcdui.Ticker -> javax.microedition.lcdui.Ticker:
    int PAINT_GAP -> a
    javax.microedition.lcdui.Ticker instance -> b
    java.lang.String text -> c
    int textPos -> d
    java.lang.String getString() -> getString
    void setString(java.lang.String) -> setString
    int getHeight() -> a
    int paintContent(javax.microedition.lcdui.Graphics) -> a
javax.microedition.lcdui.TimeCanvas -> javax.microedition.lcdui.n:
    java.util.Calendar cal -> a
    int minutes -> j
    int hours -> k
    int selected -> l
    java.util.Date getTime() -> e
    void setTime(java.util.Date) -> a
    void paint(javax.microedition.lcdui.Graphics) -> paint
    void keyPressed(int) -> keyPressed
javax.microedition.lcdui.game.GameCanvas -> javax.microedition.lcdui.game.GameCanvas:
    int UP_PRESSED -> UP_PRESSED
    int DOWN_PRESSED -> DOWN_PRESSED
    int LEFT_PRESSED -> LEFT_PRESSED
    int RIGHT_PRESSED -> RIGHT_PRESSED
    int FIRE_PRESSED -> FIRE_PRESSED
    int GAME_A_PRESSED -> GAME_A_PRESSED
    int GAME_B_PRESSED -> GAME_B_PRESSED
    int GAME_C_PRESSED -> GAME_C_PRESSED
    int GAME_D_PRESSED -> GAME_D_PRESSED
    boolean suppressKeyEvents -> a
    int latchedKeyState -> j
    int actualKeyState -> k
    javax.microedition.lcdui.Graphics getGraphics() -> getGraphics
    void paint(javax.microedition.lcdui.Graphics) -> paint
    void flushGraphics(int,int,int,int) -> flushGraphics
    void flushGraphics() -> flushGraphics
    int getKeyStates() -> getKeyStates
    boolean access$000(javax.microedition.lcdui.game.GameCanvas) -> a
    int access$176(javax.microedition.lcdui.game.GameCanvas,int) -> a
    int access$276(javax.microedition.lcdui.game.GameCanvas,int) -> b
    int access$272(javax.microedition.lcdui.game.GameCanvas,int) -> c
javax.microedition.lcdui.game.GameCanvas$KeyAccess -> javax.microedition.lcdui.game.a:
    javax.microedition.lcdui.game.GameCanvas this$0 -> a
    boolean suppressedKeyEvents(javax.microedition.lcdui.game.GameCanvas) -> suppressedKeyEvents
    void recordKeyPressed(javax.microedition.lcdui.game.GameCanvas,int) -> recordKeyPressed
    void recordKeyReleased(javax.microedition.lcdui.game.GameCanvas,int) -> recordKeyReleased
javax.microedition.lcdui.game.Layer -> javax.microedition.lcdui.game.Layer:
    int width -> a
    int height -> b
    int x -> c
    int y -> d
    boolean visible -> e
    void setSize(int,int) -> a
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    int getX() -> getX
    int getY() -> getY
    boolean isVisible() -> isVisible
    void move(int,int) -> move
    void paint(javax.microedition.lcdui.Graphics) -> paint
    void setPosition(int,int) -> setPosition
    void setVisible(boolean) -> setVisible
javax.microedition.lcdui.game.LayerManager -> javax.microedition.lcdui.game.LayerManager:
    java.util.Vector layers -> a
    int viewX -> b
    int viewY -> c
    int viewW -> d
    int viewH -> e
    void append(javax.microedition.lcdui.game.Layer) -> append
    javax.microedition.lcdui.game.Layer getLayerAt(int) -> getLayerAt
    int getSize() -> getSize
    void insert(javax.microedition.lcdui.game.Layer,int) -> insert
    void remove(javax.microedition.lcdui.game.Layer) -> remove
    void setViewWindow(int,int,int,int) -> setViewWindow
    void paint(javax.microedition.lcdui.Graphics,int,int) -> paint
javax.microedition.lcdui.game.Sprite -> javax.microedition.lcdui.game.Sprite:
    int TRANS_NONE -> TRANS_NONE
    int TRANS_ROT90 -> TRANS_ROT90
    int TRANS_ROT180 -> TRANS_ROT180
    int TRANS_ROT270 -> TRANS_ROT270
    int TRANS_MIRROR -> TRANS_MIRROR
    int TRANS_MIRROR_ROT90 -> TRANS_MIRROR_ROT90
    int TRANS_MIRROR_ROT180 -> TRANS_MIRROR_ROT180
    int TRANS_MIRROR_ROT270 -> TRANS_MIRROR_ROT270
    int frame -> a
    int[] sequence -> b
    int refX -> c
    int refY -> d
    int cols -> e
    int rows -> f
    int transform -> g
    javax.microedition.lcdui.Image img -> h
    int collX -> i
    int collY -> j
    int collWidth -> k
    int collHeight -> l
    int[] rgbData -> m
    int[] rgbDataAux -> n
    boolean collidesWith(javax.microedition.lcdui.Image,int,int,boolean) -> collidesWith
    boolean collidesWith(javax.microedition.lcdui.game.TiledLayer,boolean) -> collidesWith
    boolean collidesWith(javax.microedition.lcdui.game.Sprite,boolean) -> collidesWith
    void defineReferencePixel(int,int) -> defineReferencePixel
    int getRefPixelX() -> getRefPixelX
    int getRefPixelY() -> getRefPixelY
    void setRefPixelPosition(int,int) -> setRefPixelPosition
    void defineCollisionRectangle(int,int,int,int) -> defineCollisionRectangle
    void setFrameSequence(int[]) -> setFrameSequence
    int getFrame() -> getFrame
    int getFrameSequenceLength() -> getFrameSequenceLength
    void setFrame(int) -> setFrame
    void nextFrame() -> nextFrame
    void prevFrame() -> prevFrame
    void setImage(javax.microedition.lcdui.Image,int,int) -> setImage
    void paint(javax.microedition.lcdui.Graphics) -> paint
    int getRawFrameCount() -> getRawFrameCount
    void setTransform(int) -> setTransform
    boolean collidesWith(java.lang.Object,int,int) -> a
    boolean collidesWithPixelLevel(java.lang.Object,int,int) -> b
javax.microedition.lcdui.game.TiledLayer -> javax.microedition.lcdui.game.TiledLayer:
    int rows -> b
    int cols -> c
    javax.microedition.lcdui.Image img -> a
    int tileHeight -> d
    int tileWidth -> e
    int numStaticTiles -> f
    int[][] tiles -> g
    int[] animatedTiles -> h
    int numAnimatedTiles -> i
    int createAnimatedTile(int) -> createAnimatedTile
    int getAnimatedTile(int) -> getAnimatedTile
    void setAnimatedTile(int,int) -> setAnimatedTile
    int getCell(int,int) -> getCell
    void setCell(int,int,int) -> setCell
    void setStaticTileSet(javax.microedition.lcdui.Image,int,int) -> setStaticTileSet
    void fillCells(int,int,int,int,int) -> fillCells
    int getColumns() -> getColumns
    int getRows() -> getRows
    int getCellWidth() -> getCellWidth
    int getCellHeight() -> getCellHeight
    void paint(javax.microedition.lcdui.Graphics) -> paint
javax.microedition.midlet.MIDlet -> javax.microedition.midlet.MIDlet:
    boolean destroyed -> a
    void startApp() -> startApp
    void pauseApp() -> pauseApp
    void destroyApp(boolean) -> destroyApp
    int checkPermission(java.lang.String) -> checkPermission
    java.lang.String getAppProperty(java.lang.String) -> getAppProperty
    void notifyDestroyed() -> notifyDestroyed
    void notifyPaused() -> notifyPaused
    boolean platformRequest(java.lang.String) -> platformRequest
    void resumeRequest() -> resumeRequest
    boolean access$002(javax.microedition.midlet.MIDlet,boolean) -> a
    boolean access$000(javax.microedition.midlet.MIDlet) -> a
javax.microedition.midlet.MIDlet$MIDletAccessor -> javax.microedition.midlet.a:
    void startApp() -> startApp
    void pauseApp() -> pauseApp
    void destroyApp(boolean) -> destroyApp
javax.microedition.midlet.MIDletStateChangeException -> javax.microedition.midlet.MIDletStateChangeException:
javax.microedition.pki.Certificate -> javax.microedition.pki.Certificate:
    java.lang.String getSubject() -> getSubject
    java.lang.String getIssuer() -> getIssuer
    java.lang.String getType() -> getType
    java.lang.String getVersion() -> getVersion
    java.lang.String getSigAlgName() -> getSigAlgName
    long getNotBefore() -> getNotBefore
    long getNotAfter() -> getNotAfter
    java.lang.String getSerialNumber() -> getSerialNumber
javax.microedition.pki.CertificateException -> javax.microedition.pki.CertificateException:
    byte BAD_EXTENSIONS -> BAD_EXTENSIONS
    byte CERTIFICATE_CHAIN_TOO_LONG -> CERTIFICATE_CHAIN_TOO_LONG
    byte EXPIRED -> EXPIRED
    byte UNAUTHORIZED_INTERMEDIATE_CA -> UNAUTHORIZED_INTERMEDIATE_CA
    byte MISSING_SIGNATURE -> MISSING_SIGNATURE
    byte NOT_YET_VALID -> NOT_YET_VALID
    byte SITENAME_MISMATCH -> SITENAME_MISMATCH
    byte UNRECOGNIZED_ISSUER -> UNRECOGNIZED_ISSUER
    byte UNSUPPORTED_SIGALG -> UNSUPPORTED_SIGALG
    byte INAPPROPRIATE_KEY_USAGE -> INAPPROPRIATE_KEY_USAGE
    byte BROKEN_CHAIN -> BROKEN_CHAIN
    byte ROOT_CA_EXPIRED -> ROOT_CA_EXPIRED
    byte UNSUPPORTED_PUBLIC_KEY_TYPE -> UNSUPPORTED_PUBLIC_KEY_TYPE
    byte VERIFICATION_FAILED -> VERIFICATION_FAILED
    javax.microedition.pki.Certificate certificate -> a
    byte status -> b
    javax.microedition.pki.Certificate getCertificate() -> getCertificate
    byte getReason() -> getReason
javax.microedition.rms.InvalidRecordIDException -> javax.microedition.rms.InvalidRecordIDException:
javax.microedition.rms.RecordComparator -> javax.microedition.rms.RecordComparator:
    int EQUIVALENT -> EQUIVALENT
    int FOLLOWS -> FOLLOWS
    int PRECEDES -> PRECEDES
    int compare(byte[],byte[]) -> compare
javax.microedition.rms.RecordEnumeration -> javax.microedition.rms.RecordEnumeration:
    int numRecords() -> numRecords
    byte[] nextRecord() -> nextRecord
    int nextRecordId() -> nextRecordId
    byte[] previousRecord() -> previousRecord
    int previousRecordId() -> previousRecordId
    boolean hasNextElement() -> hasNextElement
    boolean hasPreviousElement() -> hasPreviousElement
    void reset() -> reset
    void rebuild() -> rebuild
    void keepUpdated(boolean) -> keepUpdated
    boolean isKeptUpdated() -> isKeptUpdated
    void destroy() -> destroy
javax.microedition.rms.RecordFilter -> javax.microedition.rms.RecordFilter:
    boolean matches(byte[]) -> matches
javax.microedition.rms.RecordListener -> javax.microedition.rms.RecordListener:
    void recordAdded(javax.microedition.rms.RecordStore,int) -> recordAdded
    void recordChanged(javax.microedition.rms.RecordStore,int) -> recordChanged
    void recordDeleted(javax.microedition.rms.RecordStore,int) -> recordDeleted
javax.microedition.rms.RecordStore -> javax.microedition.rms.RecordStore:
    int AUTHMODE_PRIVATE -> AUTHMODE_PRIVATE
    int AUTHMODE_ANY -> AUTHMODE_ANY
    void deleteRecordStore(java.lang.String) -> deleteRecordStore
    java.lang.String[] listRecordStores() -> listRecordStores
    javax.microedition.rms.RecordStore openRecordStore(java.lang.String,boolean) -> openRecordStore
    javax.microedition.rms.RecordStore openRecordStore(java.lang.String,boolean,int,boolean) -> openRecordStore
    javax.microedition.rms.RecordStore openRecordStore(java.lang.String,java.lang.String,java.lang.String) -> openRecordStore
    void closeRecordStore() -> closeRecordStore
    java.lang.String getName() -> getName
    int getVersion() -> getVersion
    int getNumRecords() -> getNumRecords
    int getSize() -> getSize
    int getSizeAvailable() -> getSizeAvailable
    long getLastModified() -> getLastModified
    void addRecordListener(javax.microedition.rms.RecordListener) -> addRecordListener
    void removeRecordListener(javax.microedition.rms.RecordListener) -> removeRecordListener
    int getNextRecordID() -> getNextRecordID
    int addRecord(byte[],int,int) -> addRecord
    void deleteRecord(int) -> deleteRecord
    int getRecordSize(int) -> getRecordSize
    int getRecord(int,byte[],int) -> getRecord
    byte[] getRecord(int) -> getRecord
    void setMode(int,boolean) -> setMode
    void setRecord(int,byte[],int,int) -> setRecord
    javax.microedition.rms.RecordEnumeration enumerateRecords(javax.microedition.rms.RecordFilter,javax.microedition.rms.RecordComparator,boolean) -> enumerateRecords
javax.microedition.rms.RecordStoreException -> javax.microedition.rms.RecordStoreException:
javax.microedition.rms.RecordStoreFullException -> javax.microedition.rms.RecordStoreFullException:
javax.microedition.rms.RecordStoreNotFoundException -> javax.microedition.rms.RecordStoreNotFoundException:
javax.microedition.rms.RecordStoreNotOpenException -> javax.microedition.rms.RecordStoreNotOpenException:
org.microemu.CustomItemAccess -> org.microemu.CustomItemAccess:
    javax.microedition.lcdui.CustomItem getCustomItem() -> getCustomItem
    int getPrefContentHeight(int) -> getPrefContentHeight
    int getPrefContentWidth(int) -> getPrefContentWidth
    void paint(javax.microedition.lcdui.Graphics,int,int) -> paint
org.microemu.DisplayAccess -> org.microemu.DisplayAccess:
    void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable) -> commandAction
    void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Item) -> commandAction
    javax.microedition.lcdui.Display getDisplay() -> getDisplay
    void keyPressed(int) -> keyPressed
    void keyRepeated(int) -> keyRepeated
    void keyReleased(int) -> keyReleased
    void pointerPressed(int,int) -> pointerPressed
    void pointerReleased(int,int) -> pointerReleased
    void pointerDragged(int,int) -> pointerDragged
    void paint(javax.microedition.lcdui.Graphics) -> paint
    boolean isFullScreenMode() -> isFullScreenMode
    void hideNotify() -> hideNotify
    org.microemu.device.ui.ItemUI getItemUI(javax.microedition.lcdui.Item) -> getItemUI
    javax.microedition.lcdui.Displayable getCurrent() -> getCurrent
    org.microemu.device.ui.DisplayableUI getDisplayableUI(javax.microedition.lcdui.Displayable) -> getDisplayableUI
    void setCurrent(javax.microedition.lcdui.Displayable) -> setCurrent
    void sizeChanged() -> sizeChanged
    void repaint() -> repaint
    void clean() -> clean
org.microemu.DisplayComponent -> org.microemu.DisplayComponent:
    void repaintRequest(int,int,int,int) -> repaintRequest
org.microemu.GameCanvasKeyAccess -> org.microemu.GameCanvasKeyAccess:
    boolean suppressedKeyEvents(javax.microedition.lcdui.game.GameCanvas) -> suppressedKeyEvents
    void recordKeyPressed(javax.microedition.lcdui.game.GameCanvas,int) -> recordKeyPressed
    void recordKeyReleased(javax.microedition.lcdui.game.GameCanvas,int) -> recordKeyReleased
org.microemu.MIDletAccess -> org.microemu.MIDletAccess:
    javax.microedition.midlet.MIDlet midlet -> midlet
    org.microemu.DisplayAccess displayAccess -> a
    org.microemu.DisplayAccess getDisplayAccess() -> getDisplayAccess
    void setDisplayAccess(org.microemu.DisplayAccess) -> setDisplayAccess
    void startApp() -> startApp
    void pauseApp() -> pauseApp
    void destroyApp(boolean) -> destroyApp
org.microemu.MIDletBridge -> org.microemu.MIDletBridge:
    org.microemu.MicroEmulator emulator -> a
    java.lang.ThreadLocal threadMIDletContexts -> b
    java.util.Map midletContexts -> c
    javax.microedition.midlet.MIDlet currentMIDlet -> d
    java.util.Map gameCanvasAccesses -> e
    void setMicroEmulator(org.microemu.MicroEmulator) -> setMicroEmulator
    org.microemu.MicroEmulator getMicroEmulator() -> getMicroEmulator
    void setThreadMIDletContext(org.microemu.MIDletContext) -> setThreadMIDletContext
    void registerMIDletAccess(org.microemu.MIDletAccess) -> registerMIDletAccess
    void registerMIDletContext(org.microemu.MIDletContext) -> registerMIDletContext
    org.microemu.MIDletContext getMIDletContext(javax.microedition.midlet.MIDlet) -> getMIDletContext
    org.microemu.MIDletContext getMIDletContext() -> getMIDletContext
    void setCurrentMIDlet(javax.microedition.midlet.MIDlet) -> setCurrentMIDlet
    javax.microedition.midlet.MIDlet getCurrentMIDlet() -> getCurrentMIDlet
    org.microemu.MIDletAccess getMIDletAccess() -> getMIDletAccess
    org.microemu.MIDletAccess getMIDletAccess(javax.microedition.midlet.MIDlet) -> getMIDletAccess
    org.microemu.RecordStoreManager getRecordStoreManager() -> getRecordStoreManager
    java.lang.String getAppProperty(java.lang.String) -> getAppProperty
    java.io.InputStream getResourceAsStream(java.lang.Class,java.lang.String) -> getResourceAsStream
    void notifyDestroyed() -> notifyDestroyed
    void destroyMIDletContext(org.microemu.MIDletContext) -> destroyMIDletContext
    int checkPermission(java.lang.String) -> checkPermission
    boolean platformRequest(java.lang.String) -> platformRequest
    void clear() -> clear
    org.microemu.GameCanvasKeyAccess getGameCanvasKeyAccess(javax.microedition.lcdui.game.GameCanvas) -> getGameCanvasKeyAccess
    void registerGameCanvasKeyAccess(javax.microedition.lcdui.game.GameCanvas,org.microemu.GameCanvasKeyAccess) -> registerGameCanvasKeyAccess
org.microemu.MIDletContext -> org.microemu.MIDletContext:
    org.microemu.MIDletAccess midletAccess -> a
    org.microemu.MIDletAccess getMIDletAccess() -> getMIDletAccess
    void setMIDletAccess(org.microemu.MIDletAccess) -> setMIDletAccess
    javax.microedition.midlet.MIDlet getMIDlet() -> getMIDlet
    boolean isLauncher() -> isLauncher
org.microemu.MIDletEntry -> org.microemu.MIDletEntry:
    java.lang.String name -> a
    java.lang.Class midletClass -> b
    java.lang.String getName() -> getName
    java.lang.Class getMIDletClass() -> getMIDletClass
org.microemu.MicroEmulator -> org.microemu.MicroEmulator:
    org.microemu.RecordStoreManager getRecordStoreManager() -> getRecordStoreManager
    org.microemu.app.launcher.Launcher getLauncher() -> getLauncher
    java.lang.String getAppProperty(java.lang.String) -> getAppProperty
    java.io.InputStream getResourceAsStream(java.lang.Class,java.lang.String) -> getResourceAsStream
    void notifyDestroyed(org.microemu.MIDletContext) -> notifyDestroyed
    void destroyMIDletContext(org.microemu.MIDletContext) -> destroyMIDletContext
    int checkPermission(java.lang.String) -> checkPermission
    boolean platformRequest(java.lang.String) -> platformRequest
    java.lang.String getSuiteName() -> getSuiteName
org.microemu.RecordStoreManager -> org.microemu.RecordStoreManager:
    java.lang.String getName() -> getName
    void deleteRecordStore(java.lang.String) -> deleteRecordStore
    javax.microedition.rms.RecordStore openRecordStore(java.lang.String,boolean) -> openRecordStore
    java.lang.String[] listRecordStores() -> listRecordStores
    void loadRecord(org.microemu.util.RecordStoreImpl,int) -> loadRecord
    void deleteRecord(org.microemu.util.RecordStoreImpl,int) -> deleteRecord
    void saveRecord(org.microemu.util.RecordStoreImpl,int) -> saveRecord
    int getSizeAvailable(org.microemu.util.RecordStoreImpl) -> getSizeAvailable
    void init(org.microemu.MicroEmulator) -> init
    void deleteStores() -> deleteStores
    void setRecordListener(org.microemu.util.ExtendedRecordListener) -> setRecordListener
    void fireRecordStoreListener(int,java.lang.String) -> fireRecordStoreListener
org.microemu.app.CommonInterface -> org.microemu.app.CommonInterface:
    javax.microedition.midlet.MIDlet initMIDlet(boolean,org.microemu.MIDletEntry) -> initMIDlet
org.microemu.app.launcher.Launcher -> org.microemu.app.launcher.Launcher:
    javax.microedition.lcdui.Command CMD_LAUNCH -> CMD_LAUNCH
    java.lang.String NOMIDLETS -> NOMIDLETS
    org.microemu.app.CommonInterface common -> common
    javax.microedition.lcdui.List menuList -> menuList
    java.util.Vector midletEntries -> midletEntries
    void addMIDletEntry(org.microemu.MIDletEntry) -> addMIDletEntry
    void removeMIDletEntries() -> removeMIDletEntries
    org.microemu.MIDletEntry getSelectedMidletEntry() -> getSelectedMidletEntry
    void destroyApp(boolean) -> destroyApp
    void pauseApp() -> pauseApp
    void startApp() -> startApp
    void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable) -> commandAction
org.microemu.app.ui.DisplayRepaintListener -> org.microemu.app.ui.DisplayRepaintListener:
    void repaintInvoked(java.lang.Object) -> repaintInvoked
org.microemu.device.Device -> org.microemu.device.Device:
    void init() -> init
    void destroy() -> destroy
    java.lang.String getName() -> getName
    org.microemu.device.InputMethod getInputMethod() -> getInputMethod
    org.microemu.device.FontManager getFontManager() -> getFontManager
    org.microemu.device.DeviceDisplay getDeviceDisplay() -> getDeviceDisplay
    org.microemu.device.ui.UIFactory getUIFactory() -> getUIFactory
    javax.microedition.lcdui.Image getNormalImage() -> getNormalImage
    javax.microedition.lcdui.Image getOverImage() -> getOverImage
    javax.microedition.lcdui.Image getPressedImage() -> getPressedImage
    java.util.Vector getSoftButtons() -> getSoftButtons
    java.util.Vector getButtons() -> getButtons
    boolean hasPointerEvents() -> hasPointerEvents
    boolean hasPointerMotionEvents() -> hasPointerMotionEvents
    boolean hasRepeatEvents() -> hasRepeatEvents
    boolean vibrate(int) -> vibrate
    java.util.Map getSystemProperties() -> getSystemProperties
org.microemu.device.DeviceDisplay -> org.microemu.device.DeviceDisplay:
    boolean flashBacklight(int) -> flashBacklight
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    int getFullWidth() -> getFullWidth
    int getFullHeight() -> getFullHeight
    boolean isColor() -> isColor
    boolean isFullScreenMode() -> isFullScreenMode
    int numAlphaLevels() -> numAlphaLevels
    int numColors() -> numColors
    void repaint(int,int,int,int) -> repaint
    void setScrollDown(boolean) -> setScrollDown
    void setScrollUp(boolean) -> setScrollUp
    javax.microedition.lcdui.Image createImage(int,int,boolean,int) -> createImage
    javax.microedition.lcdui.Image createImage(java.lang.String) -> createImage
    javax.microedition.lcdui.Image createImage(javax.microedition.lcdui.Image) -> createImage
    javax.microedition.lcdui.Image createImage(byte[],int,int) -> createImage
    javax.microedition.lcdui.Image createImage(java.io.InputStream) -> createImage
    javax.microedition.lcdui.Image createRGBImage(int[],int,int,boolean) -> createRGBImage
    javax.microedition.lcdui.Image createImage(javax.microedition.lcdui.Image,int,int,int,int,int) -> createImage
    javax.microedition.lcdui.Graphics getGraphics(javax.microedition.lcdui.game.GameCanvas) -> getGraphics
    void flushGraphics(javax.microedition.lcdui.game.GameCanvas,int,int,int,int) -> flushGraphics
org.microemu.device.DeviceFactory -> org.microemu.device.DeviceFactory:
    org.microemu.device.Device device -> a
    org.microemu.device.Device getDevice() -> getDevice
    void setDevice(org.microemu.device.Device) -> setDevice
org.microemu.device.EmulatorContext -> org.microemu.device.EmulatorContext:
    org.microemu.DisplayComponent getDisplayComponent() -> getDisplayComponent
    org.microemu.device.InputMethod getDeviceInputMethod() -> getDeviceInputMethod
    org.microemu.device.DeviceDisplay getDeviceDisplay() -> getDeviceDisplay
    org.microemu.device.FontManager getDeviceFontManager() -> getDeviceFontManager
    java.io.InputStream getResourceAsStream(java.lang.Class,java.lang.String) -> getResourceAsStream
    boolean platformRequest(java.lang.String) -> platformRequest
org.microemu.device.FontManager -> org.microemu.device.FontManager:
    void init() -> init
    int charWidth(javax.microedition.lcdui.Font,char) -> charWidth
    int charsWidth(javax.microedition.lcdui.Font,char[],int,int) -> charsWidth
    int getBaselinePosition(javax.microedition.lcdui.Font) -> getBaselinePosition
    int getHeight(javax.microedition.lcdui.Font) -> getHeight
    int stringWidth(javax.microedition.lcdui.Font,java.lang.String) -> stringWidth
    int substringWidth(javax.microedition.lcdui.Font,java.lang.String,int,int) -> substringWidth
org.microemu.device.InputMethod -> org.microemu.device.InputMethod:
    int INPUT_NONE -> INPUT_NONE
    int INPUT_123 -> INPUT_123
    int INPUT_ABC_UPPER -> INPUT_ABC_UPPER
    int INPUT_ABC_LOWER -> INPUT_ABC_LOWER
    int inputMode -> a
    org.microemu.device.InputMethodListener inputMethodListener -> inputMethodListener
    int maxSize -> maxSize
    void dispose() -> dispose
    int getGameAction(int) -> getGameAction
    int getKeyCode(int) -> getKeyCode
    java.lang.String getKeyName(int) -> getKeyName
    void removeInputMethodListener(org.microemu.device.InputMethodListener) -> removeInputMethodListener
    void setInputMethodListener(org.microemu.device.InputMethodListener) -> setInputMethodListener
    int getInputMode() -> getInputMode
    void setInputMode(int) -> setInputMode
    void setMaxSize(int) -> setMaxSize
    boolean validate(java.lang.String,int) -> validate
org.microemu.device.InputMethodEvent -> org.microemu.device.InputMethodEvent:
    int CARET_POSITION_CHANGED -> CARET_POSITION_CHANGED
    int INPUT_METHOD_TEXT_CHANGED -> INPUT_METHOD_TEXT_CHANGED
    int caret -> a
    java.lang.String text -> b
    int getCaret() -> getCaret
    java.lang.String getText() -> getText
org.microemu.device.InputMethodListener -> org.microemu.device.InputMethodListener:
    void caretPositionChanged(org.microemu.device.InputMethodEvent) -> caretPositionChanged
    void inputMethodTextChanged(org.microemu.device.InputMethodEvent) -> inputMethodTextChanged
    int getCaretPosition() -> getCaretPosition
    java.lang.String getText() -> getText
    int getConstraints() -> getConstraints
org.microemu.device.MutableImage -> org.microemu.device.MutableImage:
    int[] getData() -> getData
org.microemu.device.impl.Rectangle -> org.microemu.device.impl.Rectangle:
    boolean initialized -> a
    int x -> x
    int y -> y
    int width -> width
    int height -> height
    void add(int,int) -> add
    boolean contains(int,int) -> contains
    org.microemu.device.impl.Rectangle getBounds() -> getBounds
    java.lang.String toString() -> toString
org.microemu.device.impl.Shape -> org.microemu.device.impl.Shape:
    java.lang.Object clone() -> clone
    org.microemu.device.impl.Rectangle getBounds() -> getBounds
    boolean contains(int,int) -> contains
org.microemu.device.impl.SoftButton -> org.microemu.device.impl.SoftButton:
    int TYPE_COMMAND -> TYPE_COMMAND
    int TYPE_ICON -> TYPE_ICON
    java.lang.String getName() -> getName
    int getType() -> getType
    javax.microedition.lcdui.Command getCommand() -> getCommand
    void setCommand(javax.microedition.lcdui.Command) -> setCommand
    boolean isVisible() -> isVisible
    void setVisible(boolean) -> setVisible
    boolean isPressed() -> isPressed
    void setPressed(boolean) -> setPressed
    org.microemu.device.impl.Rectangle getPaintable() -> getPaintable
    boolean preferredCommandType(javax.microedition.lcdui.Command) -> preferredCommandType
org.microemu.device.ui.AlertUI -> org.microemu.device.ui.AlertUI:
    void setString(java.lang.String) -> setString
org.microemu.device.ui.CanvasUI -> org.microemu.device.ui.CanvasUI:
org.microemu.device.ui.ChoiceGroupUI -> org.microemu.device.ui.ChoiceGroupUI:
    void delete(int) -> delete
    void deleteAll() -> deleteAll
    void setSelectedIndex(int,boolean) -> setSelectedIndex
    int getSelectedIndex() -> getSelectedIndex
    void insert(int,java.lang.String,javax.microedition.lcdui.Image) -> insert
    boolean isSelected(int) -> isSelected
    void setSelectedFlags(boolean[]) -> setSelectedFlags
    int getSelectedFlags(boolean[]) -> getSelectedFlags
    java.lang.String getString(int) -> getString
    void set(int,java.lang.String,javax.microedition.lcdui.Image) -> set
    int size() -> size
org.microemu.device.ui.CommandUI -> org.microemu.device.ui.CommandUI:
    javax.microedition.lcdui.Command getCommand() -> getCommand
    void setImage(javax.microedition.lcdui.Image) -> setImage
org.microemu.device.ui.CustomItemUI -> org.microemu.device.ui.CustomItemUI:
    void repaint() -> repaint
org.microemu.device.ui.DateFieldUI -> org.microemu.device.ui.DateFieldUI:
    void setInputMode(int) -> setInputMode
    void setDate(java.util.Date) -> setDate
    java.util.Date getDate() -> getDate
org.microemu.device.ui.DisplayableUI -> org.microemu.device.ui.DisplayableUI:
    void addCommandUI(org.microemu.device.ui.CommandUI) -> addCommandUI
    void removeCommandUI(org.microemu.device.ui.CommandUI) -> removeCommandUI
    javax.microedition.lcdui.CommandListener getCommandListener() -> getCommandListener
    void setCommandListener(javax.microedition.lcdui.CommandListener) -> setCommandListener
    void hideNotify() -> hideNotify
    void showNotify() -> showNotify
    void invalidate() -> invalidate
    java.util.Vector getCommandsUI() -> getCommandsUI
org.microemu.device.ui.EventDispatcher -> org.microemu.device.ui.EventDispatcher:
    java.lang.String EVENT_DISPATCHER_NAME -> EVENT_DISPATCHER_NAME
    int maxFps -> maxFps
    boolean cancelled -> a
    org.microemu.device.ui.EventDispatcher$Event head -> b
    org.microemu.device.ui.EventDispatcher$Event tail -> c
    org.microemu.device.ui.EventDispatcher$PaintEvent scheduledPaintEvent -> d
    org.microemu.device.ui.EventDispatcher$PointerEvent scheduledPointerDraggedEvent -> e
    java.lang.Object serviceRepaintsLock -> f
    long lastPaintEventTime -> g
    void run() -> run
    void cancel() -> cancel
    void put(org.microemu.device.ui.EventDispatcher$Event) -> put
    void put(java.lang.Runnable) -> put
    void serviceRepaints() -> serviceRepaints
    void post(org.microemu.device.ui.EventDispatcher$Event) -> post
org.microemu.device.ui.EventDispatcher$Event -> org.microemu.device.ui.EventDispatcher$Event:
    org.microemu.device.ui.EventDispatcher$Event next -> a
org.microemu.device.ui.EventDispatcher$PaintEvent -> org.microemu.device.ui.EventDispatcher$PaintEvent:
    int x -> b
    int y -> c
    int width -> d
    int height -> e
    void run() -> run
    void merge(org.microemu.device.ui.EventDispatcher$PaintEvent) -> merge
org.microemu.device.ui.EventDispatcher$PointerEvent -> org.microemu.device.ui.EventDispatcher$PointerEvent:
    short POINTER_PRESSED -> POINTER_PRESSED
    short POINTER_RELEASED -> POINTER_RELEASED
    short POINTER_DRAGGED -> POINTER_DRAGGED
    java.lang.Runnable runnable -> b
    short type -> c
    int x -> d
    int y -> e
    void run() -> run
    short access$000(org.microemu.device.ui.EventDispatcher$PointerEvent) -> a
    int access$102(org.microemu.device.ui.EventDispatcher$PointerEvent,int) -> a
    int access$100(org.microemu.device.ui.EventDispatcher$PointerEvent) -> b
    int access$202(org.microemu.device.ui.EventDispatcher$PointerEvent,int) -> b
    int access$200(org.microemu.device.ui.EventDispatcher$PointerEvent) -> c
org.microemu.device.ui.EventDispatcher$RunnableEvent -> org.microemu.device.ui.EventDispatcher$RunnableEvent:
    java.lang.Runnable runnable -> b
    void run() -> run
org.microemu.device.ui.FormUI -> org.microemu.device.ui.FormUI:
    int append(org.microemu.device.ui.ItemUI) -> append
    void delete(int) -> delete
    void deleteAll() -> deleteAll
    void insert(int,org.microemu.device.ui.ItemUI) -> insert
    void set(int,org.microemu.device.ui.ItemUI) -> set
    void setItemStateListener(javax.microedition.lcdui.ItemStateListener) -> setItemStateListener
    javax.microedition.lcdui.ItemStateListener getItemStateListener() -> getItemStateListener
org.microemu.device.ui.GaugeUI -> org.microemu.device.ui.GaugeUI:
    void setValue(int) -> setValue
    int getValue() -> getValue
    void setMaxValue(int) -> setMaxValue
org.microemu.device.ui.ImageStringItemUI -> org.microemu.device.ui.ImageStringItemUI:
    void setImage(javax.microedition.lcdui.Image) -> setImage
    void setText(java.lang.String) -> setText
org.microemu.device.ui.ItemUI -> org.microemu.device.ui.ItemUI:
    void setDefaultCommand(javax.microedition.lcdui.Command) -> setDefaultCommand
    void setLabel(java.lang.String) -> setLabel
org.microemu.device.ui.ListUI -> org.microemu.device.ui.ListUI:
    int append(java.lang.String,javax.microedition.lcdui.Image) -> append
    int getSelectedIndex() -> getSelectedIndex
    java.lang.String getString(int) -> getString
    void setSelectCommand(javax.microedition.lcdui.Command) -> setSelectCommand
    void setSelectedIndex(int,boolean) -> setSelectedIndex
    void delete(int) -> delete
    void deleteAll() -> deleteAll
    void insert(int,java.lang.String,javax.microedition.lcdui.Image) -> insert
    void set(int,java.lang.String,javax.microedition.lcdui.Image) -> set
    int size() -> size
org.microemu.device.ui.TextBoxUI -> org.microemu.device.ui.TextBoxUI:
    int getCaretPosition() -> getCaretPosition
    java.lang.String getString() -> getString
    void setString(java.lang.String) -> setString
    void insert(java.lang.String,int) -> insert
    void delete(int,int) -> delete
org.microemu.device.ui.TextFieldUI -> org.microemu.device.ui.TextFieldUI:
    void setConstraints(int) -> setConstraints
    void setString(java.lang.String) -> setString
    java.lang.String getString() -> getString
org.microemu.device.ui.UIFactory -> org.microemu.device.ui.UIFactory:
    org.microemu.device.ui.EventDispatcher createEventDispatcher(javax.microedition.lcdui.Display) -> createEventDispatcher
    org.microemu.device.ui.CommandUI createCommandUI(javax.microedition.lcdui.Command) -> createCommandUI
    org.microemu.device.ui.AlertUI createAlertUI(javax.microedition.lcdui.Alert) -> createAlertUI
    org.microemu.device.ui.CanvasUI createCanvasUI(javax.microedition.lcdui.Canvas) -> createCanvasUI
    org.microemu.device.ui.FormUI createFormUI(javax.microedition.lcdui.Form) -> createFormUI
    org.microemu.device.ui.ListUI createListUI(javax.microedition.lcdui.List) -> createListUI
    org.microemu.device.ui.TextBoxUI createTextBoxUI(javax.microedition.lcdui.TextBox) -> createTextBoxUI
    org.microemu.device.ui.ChoiceGroupUI createChoiceGroupUI(javax.microedition.lcdui.ChoiceGroup,int) -> createChoiceGroupUI
    org.microemu.device.ui.CustomItemUI createCustomItemUI(org.microemu.CustomItemAccess) -> createCustomItemUI
    org.microemu.device.ui.DateFieldUI createDateFieldUI(javax.microedition.lcdui.DateField) -> createDateFieldUI
    org.microemu.device.ui.GaugeUI createGaugeUI(javax.microedition.lcdui.Gauge) -> createGaugeUI
    org.microemu.device.ui.ImageStringItemUI createImageStringItemUI(javax.microedition.lcdui.Item) -> createImageStringItemUI
    org.microemu.device.ui.TextFieldUI createTextFieldUI(javax.microedition.lcdui.TextField) -> createTextFieldUI
org.microemu.microedition.io.PushRegistryDelegate -> org.microemu.microedition.io.PushRegistryDelegate:
    void registerConnection(java.lang.String,java.lang.String,java.lang.String) -> registerConnection
    boolean unregisterConnection(java.lang.String) -> unregisterConnection
    java.lang.String[] listConnections(boolean) -> listConnections
    java.lang.String getMIDlet(java.lang.String) -> getMIDlet
    java.lang.String getFilter(java.lang.String) -> getFilter
    long registerAlarm(java.lang.String,long) -> registerAlarm
org.microemu.util.ExtendedRecordListener -> org.microemu.util.ExtendedRecordListener:
    int RECORD_ADD -> RECORD_ADD
    int RECORD_READ -> RECORD_READ
    int RECORD_CHANGE -> RECORD_CHANGE
    int RECORD_DELETE -> RECORD_DELETE
    int RECORDSTORE_OPEN -> RECORDSTORE_OPEN
    int RECORDSTORE_CLOSE -> RECORDSTORE_CLOSE
    int RECORDSTORE_DELETE -> RECORDSTORE_DELETE
    void recordEvent(int,long,javax.microedition.rms.RecordStore,int) -> recordEvent
    void recordStoreEvent(int,long,java.lang.String) -> recordStoreEvent
org.microemu.util.RecordEnumerationImpl -> org.microemu.util.RecordEnumerationImpl:
    org.microemu.util.RecordStoreImpl recordStoreImpl -> a
    javax.microedition.rms.RecordFilter filter -> b
    javax.microedition.rms.RecordComparator comparator -> c
    boolean keepUpdated -> d
    java.util.Vector enumerationRecords -> e
    int currentRecord -> f
    javax.microedition.rms.RecordListener recordListener -> g
    int numRecords() -> numRecords
    byte[] nextRecord() -> nextRecord
    int nextRecordId() -> nextRecordId
    byte[] previousRecord() -> previousRecord
    int previousRecordId() -> previousRecordId
    boolean hasNextElement() -> hasNextElement
    boolean hasPreviousElement() -> hasPreviousElement
    void reset() -> reset
    void rebuild() -> rebuild
    void keepUpdated(boolean) -> keepUpdated
    boolean isKeptUpdated() -> isKeptUpdated
    void destroy() -> destroy
    javax.microedition.rms.RecordComparator access$000(org.microemu.util.RecordEnumerationImpl) -> a
org.microemu.util.RecordEnumerationImpl$1 -> org.microemu.util.a:
    org.microemu.util.RecordEnumerationImpl this$0 -> a
    void recordAdded(javax.microedition.rms.RecordStore,int) -> recordAdded
    void recordChanged(javax.microedition.rms.RecordStore,int) -> recordChanged
    void recordDeleted(javax.microedition.rms.RecordStore,int) -> recordDeleted
org.microemu.util.RecordEnumerationImpl$2 -> org.microemu.util.b:
    org.microemu.util.RecordEnumerationImpl this$0 -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
org.microemu.util.RecordEnumerationImpl$EnumerationRecord -> org.microemu.util.c:
    int recordId -> a
    byte[] value -> b
org.microemu.util.RecordStoreImpl -> org.microemu.util.RecordStoreImpl:
    byte[] fileIdentifier -> a
    int lastRecordId -> b
    int size -> c
    java.util.Hashtable records -> d
    java.lang.String recordStoreName -> e
    int version -> f
    long lastModified -> g
    boolean open -> h
    org.microemu.RecordStoreManager recordStoreManager -> i
    java.util.Vector recordListeners -> j
    int readHeader(java.io.DataInputStream) -> readHeader
    void readRecord(java.io.DataInputStream) -> readRecord
    void writeHeader(java.io.DataOutputStream) -> writeHeader
    void writeRecord(java.io.DataOutputStream,int) -> writeRecord
    boolean isOpen() -> isOpen
    void setOpen(boolean) -> setOpen
    void closeRecordStore() -> closeRecordStore
    java.lang.String getName() -> getName
    int getVersion() -> getVersion
    int getNumRecords() -> getNumRecords
    int getSize() -> getSize
    int getSizeAvailable() -> getSizeAvailable
    long getLastModified() -> getLastModified
    void addRecordListener(javax.microedition.rms.RecordListener) -> addRecordListener
    void removeRecordListener(javax.microedition.rms.RecordListener) -> removeRecordListener
    int getNextRecordID() -> getNextRecordID
    int addRecord(byte[],int,int) -> addRecord
    void deleteRecord(int) -> deleteRecord
    int getRecordSize(int) -> getRecordSize
    int getRecord(int,byte[],int) -> getRecord
    byte[] getRecord(int) -> getRecord
    void setRecord(int,byte[],int,int) -> setRecord
    javax.microedition.rms.RecordEnumeration enumerateRecords(javax.microedition.rms.RecordFilter,javax.microedition.rms.RecordComparator,boolean) -> enumerateRecords
    int getHeaderSize() -> getHeaderSize
    int getRecordHeaderSize() -> getRecordHeaderSize
    void fireRecordListener(int,int) -> a
